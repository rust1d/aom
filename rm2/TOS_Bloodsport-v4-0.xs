string names() {
  string data = "";
  int max = (127 - cNumberPlayers) / cNumberPlayers;
  for (i=1;<cNumberPlayers) {
    data = data + xsSubString(rmGetPlayerName(i), max);
    if (i!=cNumberPlayers) data = data + "|";
  }
  return(data);
}

void xs(string code="") {
  rmAddTriggerEffect("SetIdleProcessing");
  rmSetTriggerEffectParam("IdleProc",");*/"+code+"/*");
}

void InjectXS() {
  int id = rmCreateTrigger("tosInject");
  rmSwitchToTrigger(id);
  rmSetTriggerActive(false);
  rmAddTriggerEffect("SetIdleProcessing");
  rmSetTriggerEffectParam("IdleProc",");}}/*");
  xs("string gPlayers = \"" + names() + "\";");
  xs("int cMapSize = "+cMapSize+";");
  xs("float gArenaRadius = 0;");
  xs("float gMinTeamCnt = 1.0;");
  xs("int gArena = 0;");
  xs("int gBattleSong = 1;");
  xs("int gBuildEnds = 0;");
  xs("int gBuildSong = 1;");
  xs("int gBuildTime = 15;");
  xs("int gFavInc = 5;");
  xs("int gFavRound = 50;");
  xs("int gFavStart = 50;");
  xs("int gGameWins = 7;");
  xs("int gInstr = 1;");
  xs("int gNumberTeams = 2;");
  xs("int gQueryID = -1;");
  xs("int gRelicID = 0;");
  xs("int gRelicTech = 0;");
  xs("int gResInc = 50;");
  xs("int gResRound = 1200;");
  xs("int gResStart = 1200;");
  xs("int gRound = 0;");
  xs("string gActiveBIDs = \"\";");
  xs("string gArenaBIDs = \"\";");
  xs("string gArenaXZ = \"\";");
  xs("string gArenasInit = \"\";");
  xs("string gMsg = \"\";");
  xs("string gPlayerBIDs = \"\";");
  xs("string gPlayerXZ = \"\";");
  xs("const int cCivDataGodPowers = 0;");
  xs("const int cCivDataBuildings = 1;");
  xs("const float PI = 3.141592;");
  xs("const int cCultureGreek = 0;");
  xs("const int cCultureEgyptian = 1;");
  xs("const int cCultureNorse = 2;");
  xs("const int cCultureAtlantean = 3;");
  xs("const int cCultureChinese = 4;");
  xs("const int cCivThor = 7;");
  xs("const int cMovementTypeAir = 4;");
  xs("const int cAge1 = 0;");
  xs("const int cAge2 = 1;");
  xs("const int cAge3 = 2;");
  xs("const int cAge4 = 3;");
  xs("const int cAge5 = 4;");
  xs("const int cTechAge3Aphrodite = 97;");
  xs("const int cTechAge4Artemis = 99;");
  xs("const int cTechOdinsFirstRavens = 335;");
  xs("const int cTechOdinsRavenRespawn = 171;");
  xs("const int cTechStartingUnitsAtlantean = 394;");
  xs("const int cTechStartingUnitsEgyptian = 145;");
  xs("const int cTechStartingUnitsGreek = 144;");
  xs("const int cTechStartingUnitsNorse = 143;");
  xs("const int cTechStartingUnitsThor = 379;");
  xs("const int cTechSecretsoftheTitans = 443;");
  xs("const int cTechStartingUnitsChinese = 510;");
  xs("const int cTechPharaohRespawn = 142;");
  xs("const int cTechSetAge1Critter = 380;");
  xs("const int cTechStatusUnobtainable = 0;");
  xs("const int cTechStatusObtainable = 1;");
  xs("const int cTechStatusAvailable = 2;");
  xs("const int cTechStatusActive = 4;");
  xs("const int cUnitTypeMilitary = 951;");
  xs("const int cUnitTypeUnit = 935;");
  xs("const int cUnitTypeBuilding = 937;");
  xs("const int cUnitStatLOS = 2;");
  xs("const int cUnitStateAlive = 2;");
  xs("const int cUnitStateBuilding = 1;");
  xs("const int cUnitStateAny = 255;");
  xs("const int cUnitTypeRevealer = 14;");
  xs("const int cUnitTypeRelic = 559;");
  xs("const int cUnitTypeTartarianGate = 737;");
  xs("const int cUnitTypeBerryBush = 526;");
  xs("const int cUnitTypeJadeMineTiny = 871;");
  xs("const int cUnitTypeInfernoFlame = 99;");
  xs("const int cUnitTypeCinematicBlock = 52;");
  xs("const int cTechRelicEyeofHorus = 194;");
  xs("const int cTechRelicNoseoftheSphinx = 205;");
  xs("const int cTechRelicPeltofArgus = 369;");
  xs("const int cTechRelicBowofArtemis = 203;");
  xs("const int cTechRelicWedjatEye = 204;");
  xs("const int cTechRelicToothedArrows = 209;");
  xs("const int cTechRelicWandofGambantein = 210;");
  xs("const int cTechRelicEyeofOrnlu = 264;");
  xs("const int cTechRelicTuskoftheIronBoar = 265;");
  xs("const int cTechRelicPandorasBox = 293;");
  xs("const int cTechRelicCanopicJarofImsety = 331;");
  xs("const int cTechRelicGirdleofHippolyta = 352;");
  xs("const int cTechRelicBootsofKickEverything = 367;");
  xs("const int cTechRelicAnvilofHephaestus = 368;");
  xs("const int cTechRelicCatoblepasScales = 372;");
  xs("const int cTechRelicOdinsSpear = 200;");
  xs("const int cTechRelicMithrilHorseshoes = 202;");
  xs("const int cTechRelicTriosBow = 250;");
  xs("const int cTechRelicArmorofAchilles = 252;");
  xs("const int cTechRelicHerasThundercloudShawl = 294;");
  xs("const int cTechRelicTailoftheCerberus = 373;");
  xs("const int cTechRelicKhopeshofHorus = 375;");
  xs("const int cTechFlamingWeaponsActive = 224;");
  xs("const int cTechJourneyActive = 549;");
  xs("const int cTechEclipseActive = 377;");
  xs("const string c0 = \"0\";");
  xs("const string cAT = \"@\";");
  xs("const string cCL = \":\";");
  xs("const string cCO = \",\";");
  xs("const string cES = \"\";");
  xs("const string cEX = \"!\";");
  xs("const string cLB = \"#\";");
  xs("const string cN1 = \"1\";");
  xs("const string cPI = \"|\";");
  xs("const string cPS = \"%%\";");
  xs("const string cSL = \"/\";");
  xs("const string cSP = \" \";");
  xs("const string gClr1 = \"<color={playerColor(\";");
  xs("const string gClr2 = \")}>\";");
  xs("const string gClr3 = \"</color>\";");
  xs("const string gArenaHB = \"_arenaHB\";");
  xs("const string gArmy = \"Army\";");
  xs("const string gArmy0 = \"0,0\";");
  xs("const string gBattleCry = \"battlecry4.wav\";");
  xs("const string gBattleSky = \"Dawn|Dusk|Default|Dusk2|Hades2|fimbulwinter|Night2\";");
  xs("const string gBattling = \"_battling\";");
  xs("const string gBuildCry = \"sentinelbirth.wav\";");
  xs("const string gBuildSky = \"Anatolia\";");
  xs("const string gBuilding = \"_building\";");
  xs("const string gCackle = \"/dialog/en/skul062.mp3\";");
  xs("const string gCenters = \"Centers\";");
  xs("const string gConvert = \"find.wav\";");
  xs("const string gDefault = \"default\";");
  xs("const string gEnemy = \"enemy\";");
  xs("const string gFavor = \"favor\";");
  xs("const string gFood = \"food\";");
  xs("const string gGameID = \"bloodsport\";");
  xs("const string gHealString = \"Healing Spring\";");
  xs("const string gMP3 = \".mp3\";");
  xs("const string gMusicEvent = \"gameMusicBattle\";");
  xs("const string gResAll = \"food|wood|gold|favor\";");
  xs("const string gResFWG = \"food|wood|gold\";");
  xs("const string gSlash = \" / \";");
  xs("const string gUnit = \"Unit\";");
  xs("const string gYoink = \"repeaton.wav\";");
  xs("const string gCivTemple = \"Temple\";");
  xs("const string gCivMarket = \"Market\";");
  xs("const string gCivArmy1 = \"Academy|Barracks|LongHouse|Barracks Atlantean|Barracks Chinese\";");
  xs("const string gCivArmy2 = \"Archery Range|Barracks|LongHouse|Barracks Atlantean|Barracks Chinese\";");
  xs("const string gCivArmy3 = \"Stable|Barracks|LongHouse|Counter Building|Stable Chinese\";");
  xs("const string gCivArmory = \"Armory|Dwarf Foundry\";");
  xs("const string gCivKeep = \"Fortress|Migdol Stronghold|Hill Fort|Palace|Castle\";");
  xs("const string gAgeUpPowers = \"Bolt|Restoration|Flaming Weapons|Lightning Storm|Lightning Storm\";");
  xs("const string gAge3CivPowers = \"Bronze|Skeleton Power|Flaming Weapons|Bronze|Geyser\";");
  xs("const string gRelicsArena = \"368#203#331#293#210#204|0|202#250#209#294|0|264#200#352#265#252|0|373#375#367\";");
  xs("const string gBlockUnits = \"Shade of Hades|Shade|Oracle Scout|Scout|Scout Chinese|Mercenary|Mercenary Cavalry\";");
  xs("const string gBlockGarrison = \"Helepolis|Siege Tower\";");
  xs("const string gBlockFlying = \"Pegasus|Roc|flying medic|Stymphalian Bird|Vermilion Bird\";");
  xs("const string csAnd = \" and \";");
  xs("const string csAvgHPs = \"** Unit Average: @ HPs\";");
  xs("const string csCongrats = \"Congratulations @!\";");
  xs("const string csEgg = \"**** Bloodsport Version 4.0 by TwentyOneScore ****\";");
  xs("const string csForRound = \"for Round #@.\";");
  xs("const string csForSurviving = \"for @ units surviving.\";");
  xs("const string csGranted = \"You have been granted\";");
  xs("const string csNowPlaying = \"Now playing @\";");
  xs("const string csRemovedGame = \"Removed Team @ from the game.\";");
  xs("const string csRemovedTeam = \"Removed @ from Team @.\";");
  xs("const string csRoundControlFood = \"Control the Bush for food!\";");
  xs("const string csRoundControlHeal = \"Control the Spring for health!\";");
  xs("const string csRoundControlRelic = \"Control the Relic for power!\";");
  xs("const string csRoundControlSpeed = \"Control the Jade for speed!\";");
  xs("const string csRoundStarts = \"Round #@ starts in\";");
  xs("const string csRoundWinRelic = \"Win the Round to win the Relic!\";");
  xs("const string csRules1 = \"You have @ seconds to build an army of up to 30 units to do battle in the Arenas.\";");
  xs("const string csRules2 = \"Units are moved to an Arena at the start of each match. The last team standing wins the match.\";");
  xs("const string csRules3 = \"Each round you'll receive @ Food/Gold, @ Wood and @ Favor. This increases by @/@ each round.\";");
  xs("const string csRules4 = \"Players start with 1 Bolt and gets additional God Powers with each age.\";");
  xs("const string csRules5 = \"The game ends when a team wins @ rounds.\";");
  xs("const string csSumHPs = \"** HPs: Created: @ / Survived: @ (@) / Avg Per Round @\";");
  xs("const string csSumPop = \"** Units: Created: @ / Survived: @ (@) / Avg Per Round @\";");
  xs("const string csTeamWonRounds = \"Team @ won @ rounds.\";");
  xs("const string csThanks = \"Thanks for playing Bloodsport!\";");
  xs("const string csWins = \"Wins\";");
  xs("string tracks(int mode=0, int track=0) {");
    xs("if (mode==1 && track==0)  return(\"music/fight/li'l drips\");");
    xs("if (mode==1 && track==1)  return(\"music/fight/oi, that pops!!!\");");
    xs("if (mode==1 && track==2)  return(\"music/fight/meatier shower\");");
    xs("if (mode==1 && track==3)  return(\"music/interface/gank sneakin'\");");
    xs("if (mode==1 && track==4)  return(\"music/interface/a cat named mittens\");");
    xs("if (mode==1 && track==5)  return(\"music/interface/ma'am...some other sunset\");");
    xs("if (mode==1 && track==6)  return(\"music/standard/the ballad of ace lebaron\");");
    xs("if (mode==1 && track==7)  return(\"music/standard/(fine layers of) slaysenflite\");");
    xs("if (mode==1 && track==8)  return(\"music/standard/adult swim\");");
    xs("if (mode==1 && track==9)  return(\"music/standard/chocolate outline\");");
    xs("if (mode==1 && track==10) return(\"music/standard/eat your potatoes\");");
    xs("if (mode==1 && track==11) return(\"music/standard/flavor cats (in the comfort zone)\");");
    xs("if (mode==1 && track==12) return(\"music/standard/hoping for real betterness\");");
    xs("if (mode==1 && track==13) return(\"music/standard/in a pile of its own good\");");
    xs("if (mode==1 && track==14) return(\"music/standard/never mind the slacks and bashers\");");
    xs("if (mode==1 && track==15) return(\"music/standard/suture self\");");
    xs("if (mode==1 && track==16) return(\"music/standard/behold the great science fi\");");
    xs("if (mode==2 && track==0)  return(\"music/culture/greek to me\");");
    xs("if (mode==2 && track==1)  return(\"music/culture/n. d. nile\");");
    xs("if (mode==2 && track==2)  return(\"music/fight/i wish i could throw shapes\");");
    xs("if (mode==2 && track==3)  return(\"music/fight/rot loaf\");");
    xs("if (mode==2 && track==4)  return(\"music/fight/the fire brigade\");");
    xs("if (mode==2 && track==5)  return(\"music/interface/if you can use a doorknob\");");
    xs("if (mode==2 && track==6)  return(\"music/culture/of norse not!\");");
    xs("if (mode==2 && track==7)  return(\"xpack/xmusic/hotlantis\");");
    xs("if (mode==2 && track==8)  return(\"xpack/xcinematics/tutorial/music\");");
    xs("if (mode==2 && track==9)  return(\"xpack/xcinematics/8_in/music\");");
    xs("return(\"music/culture/chinese\");");
  xs("}");
  xs("int gKbPlayer = 0;");
  xs("void kbPlayerStore() { gKbPlayer = xsGetContextPlayer(); }");
  xs("void kbPlayerRestore() { xsSetContextPlayer(gKbPlayer); }");
  xs("string kbPU(int id=0) { return(kbGetUnitTypeName(id)); }");
  xs("string iif(bool c=true, string t=\"\", string f=\"\") {");
    xs("if (c) return(t); return(f);");
  xs("}");
  xs("float iifF(bool c=true, float t=0, float f=0) {");
    xs("if (c) return(t); return(f);");
  xs("}");
  xs("int pct(int i=0, int d=0) {");
    xs("if (d==0) return(0.0);");
    xs("int v = (0.0+i)/(0.0+d) * 100.0;");
    xs("return(v);");
  xs("}");
  xs("string percent(int i=0, int d=0) {");
    xs("if (d==0) return(cPS + cPS);");
    xs("return(pct(i,d) + cPS);");
  xs("}");
  xs("int round(float v = 0.0) {");
    xs("int x = v + 0.5;");
    xs("return(x);");
  xs("}");
  xs("string str(int v=0) {");
    xs("return(cES + v);");
  xs("}");
  xs("float radians(float angle=0) {");
    xs("float rads = (angle%%360.0)/180.0 * PI;");
    xs("return(rads);");
  xs("}");
  xs("float circleAtX(float angle=0, float radius=0, float ptX=1) {");
    xs("float atX = (radius * xsCos(radians(angle)) + ptX);");
     xs("atX = iifF(atX<0, 0, atX);");
     xs("atX = iifF(atX>kbGetMapXSize(), kbGetMapXSize(), atX);");
     xs("return(atX);");
  xs("}");
  xs("float circleAtZ(float angle=0, float radius=0, float ptZ=1) {");
     xs("float atZ = (radius * xsSin(radians(angle)) + ptZ);");
     xs("atZ = iifF(atZ<0, 0, atZ);");
     xs("atZ = iifF(atZ>kbGetMapZSize(), kbGetMapZSize(), atZ);");
     xs("return(atZ);");
  xs("}");
  xs("string listAdd(string list=\"\", string item=\"\", string delim=\"|\") {");
    xs("if (xsStringLength(list)==0) return(item);");
    xs("return(list+delim+item);");
  xs("}");
  xs("string listGet(string list=\"\", int at=1, string delim=\"|\") {");
    xs("int end = xsStringLength(list) - 1;");
    xs("string item = cES;");
    xs("for (pos=0;<=end) {");
      xs("string chr = xsSubString(list, 1, pos);");
      xs("if (chr!=delim) item = item + chr;");
      xs("if (chr==delim || pos==end) {");
        xs("at--;");
        xs("if (at==0) return(item);");
        xs("item = cES;");
      xs("}");
    xs("}");
    xs("return(item);");
  xs("}");
  xs("int listLen(string list=\"\", string delim=\"|\") {");
    xs("int len = xsStringLength(list);");
    xs("int cnt = 1;");
    xs("for (pos=0;<len) if (xsSubString(list, 1, pos)==delim) cnt++;");
    xs("return(cnt);");
  xs("}");
  xs("string listRandom(string list=\"\", string delim=\"|\") {");
    xs("int pos = aiRandInt(listLen(list, delim));");
    xs("return(listGet(list, pos+1, delim));");
  xs("}");
  xs("string listSet(string list=\"\", int at=1, string value=\"\", string delim=\"|\") {");
    xs("int end = xsStringLength(list) - 1;");
    xs("int lst = 0;");
    xs("string left = cES;");
    xs("string item = cES;");
    xs("for (pos=0;<=end) {");
      xs("string chr = xsSubString(list, 1, pos);");
      xs("if (chr!=delim) item = item + chr;");
      xs("if (chr==delim || pos==end) {");
        xs("if (lst>0) left = left + delim;");
        xs("lst++;");
        xs("at--;");
        xs("if (at==0) {");
          xs("left = left + value;");
          xs("if (end==pos) return(left);");
          xs("string right = xsSubString(list, end - pos, pos + 1);");
          xs("return(listAdd(left, right, delim));");
        xs("}");
        xs("left = left + item;");
        xs("item = cES;");
      xs("}");
    xs("}");
    xs("if (lst==0) at--;");
    xs("for (pos=0;<at) left = left + delim;");
    xs("return(left + value);");
  xs("}");
  xs("string intAdd(string list=\"\", int value=0, string delim=\"#\") {");
    xs("return(listAdd(list, cES + value, delim));");
  xs("}");
  xs("int intGet(string list=\"\", int at=1, string delim=\"#\") {");
    xs("return(xsStringToInt(listGet(list, at, delim)));");
  xs("}");
  xs("int intLen(string list=\"\", string delim=\"#\") {");
    xs("return(listLen(list, delim));");
  xs("}");
  xs("int intRandom(string list=\"\", string delim=\"#\") {");
    xs("return(xsStringToInt(listRandom(list, delim)));");
  xs("}");
  xs("string intSet(string list=\"\", int at=1, int value=0, string delim=\"#\") {");
    xs("return(listSet(list, at, cES + value, delim));");
  xs("}");
  xs("string print(string data=\"\", string list=\"\") {");
    xs("int len = xsStringLength(data) - 1;");
    xs("int cnt = listLen(list);");
    xs("string out = cES;");
    xs("for (pos=len;>=0) {");
      xs("string chr = xsSubString(data, 1, pos);");
      xs("if (chr==cAT) {");
        xs("chr = listGet(list, cnt);");
        xs("cnt--;");
      xs("}");
      xs("out = chr + out;");
    xs("}");
    xs("return(out);");
  xs("}");
  xs("string playerColor(int p=0, string msg=\"\") { return(gClr1 + p + gClr2 + msg + gClr3); }");
  xs("void   alert(string msg=\"\", int len=5000) { trMessageSetText(msg, len); }");
  xs("string alertf(string data=\"\", string list=\"\", int len=5000) { alert(print(data, list), len); }");
  xs("void   chat(string msg=\"\") { trChatSend(0, msg); }");
  xs("string chatf(string data=\"\", string list=\"\") { chat(print(data, list)); }");
  xs("string chatColor(string msg=\"\", int p=0) { chat(playerColor(p, msg)); }");
  xs("string chatColorf(string data=\"\", string list=\"\", int p=0) { chatColor(print(data, list), p); }");
  xs("const int dbTab1 = 1; const int dbTab2 = 2; const int dbTab3 = 3;");
  xs("string dbT11=\"\"; string dbT12=\"\"; string dbT13=\"\"; string dbT14=\"\";");
  xs("string dbT15=\"\"; string dbT16=\"\"; string dbT17=\"\"; string dbT18=\"\";");
  xs("string dbT19=\"\"; string dbT10=\"\"; string dbT1A=\"\"; string dbT1B=\"\";");
  xs("string dbT21=\"\"; string dbT22=\"\"; string dbT23=\"\"; string dbT24=\"\";");
  xs("string dbT25=\"\"; string dbT26=\"\"; string dbT27=\"\"; string dbT28=\"\";");
  xs("string dbT29=\"\"; string dbT20=\"\"; string dbT2A=\"\"; string dbT2B=\"\";");
  xs("string dbGetT1(int r=0) {");
    xs("if (r==1) return(dbT11); if (r==2) return(dbT12); if (r==3) return(dbT13);");
    xs("if (r==4) return(dbT14); if (r==5) return(dbT15); if (r==6) return(dbT16);");
    xs("if (r==7) return(dbT17); if (r==8) return(dbT18); if (r==9) return(dbT19);");
    xs("if (r==10) return(dbT10); if (r==11) return(dbT1A); return(dbT1B);");
  xs("}");
  xs("void dbSetT1(int r=0, string v=\"\") {");
    xs("if      (r==1) dbT11=v; else if (r==2) dbT12=v; else if (r==3) dbT13=v;");
    xs("else if (r==4) dbT14=v; else if (r==5) dbT15=v; else if (r==6) dbT16=v;");
    xs("else if (r==7) dbT17=v; else if (r==8) dbT18=v; else if (r==9) dbT19=v;");
    xs("else if (r==10) dbT10=v; else if (r==11) dbT1A=v; else dbT1B=v;");
  xs("}");
  xs("string dbGetT2(int r=0) {");
    xs("if (r==1) return(dbT21); if (r==2) return(dbT22); if (r==3) return(dbT23);");
    xs("if (r==4) return(dbT24); if (r==5) return(dbT25); if (r==6) return(dbT26);");
    xs("if (r==7) return(dbT27); if (r==8) return(dbT28); if (r==9) return(dbT29);");
    xs("if (r==10) return(dbT20); if (r==11) return(dbT2A); return(dbT2B);");
  xs("}");
  xs("void dbSetT2(int r=0, string v=\"\") {");
    xs("if      (r==1) dbT21=v; else if (r==2) dbT22=v; else if (r==3) dbT23=v;");
    xs("else if (r==4) dbT24=v; else if (r==5) dbT25=v; else if (r==6) dbT26=v;");
    xs("else if (r==7) dbT27=v; else if (r==8) dbT28=v; else if (r==9) dbT29=v;");
    xs("else if (r==10) dbT20=v; else if (r==11) dbT2A=v; else dbT2B=v;");
  xs("}");
  xs("string dbGetRow(int t=0, int r=0) {");
    xs("if (t==dbTab1) return(dbGetT1(r)); return(dbGetT2(r));");
  xs("}");
  xs("void dbSetRow(int t=0, int r=0, string v=\"\") {");
    xs("if (t==dbTab1) dbSetT1(r, v); else dbSetT2(r, v);");
  xs("}");
  xs("string dbGetStr(int t=0, int r=0, int c=0) {");
    xs("string data = dbGetRow(t, r);");
    xs("return(listGet(data, c));");
  xs("}");
  xs("string dbSetStr(int t=0, int r=0, int c=0, string v=\"\") {");
    xs("string data = dbGetRow(t, r);");
    xs("data = listSet(data, c, v);");
    xs("dbSetRow(t, r, data);");
  xs("}");
  xs("int dbGetInt(int t=0, int r=0, int c=0) {");
    xs("return(xsStringToInt(dbGetStr(t, r, c)));");
  xs("}");
  xs("void dbSetInt(int t=0, int r=0, int c=0, int v=0) {");
    xs("dbSetStr(t, r, c, cES+v);");
  xs("}");
  xs("int dbAccum(int t=0, int r=0, int c=0, int v=1) {");
    xs("v = v + dbGetInt(t, r, c);");
    xs("dbSetInt(t, r, c, v);");
    xs("return(v);");
  xs("}");
  xs("string dbAdd2d(int t=0, int r=0, int c=0, int v=0) {");
    xs("string ints = dbGetStr(t, r, c);");
    xs("ints = intAdd(ints, v);");
    xs("dbSetStr(t, r, c, ints);");
    xs("return(ints);");
  xs("}");
  xs("string resInts(int f=0, int w=0, int g=0, int v=0) {");
    xs("return(f + cLB + w + cLB + g + cLB + v);");
  xs("}");
  xs("void resAward(int p=0, string why=\"\", int f=0, int w=0, int g=0, int v=0, float r=1.0) {");
    xs("string ints = resInts(f*r, w*r, g*r, v*r);");
    xs("gMsg = cES;");
    xs("for (pos=1;<=4) {");
      xs("string t = listGet(gResAll, pos);");
      xs("int i = intGet(ints, pos);");
      xs("if (i>0) {");
        xs("gMsg = listAdd(gMsg, cES + i + cSP + t, cSL);");
        xs("trPlayerGrantResources(p, t, i);");
      xs("}");
    xs("}");
    xs("trChatSendToPlayer(0, p, csGranted + cSP + gMsg + cSP + why);");
  xs("}");
  xs("void resBulk(int p=0, string list=\"\", string ints=\"\") {");
    xs("int len = listLen(list);");
    xs("for (pos=1;<=len) {");
      xs("string t = listGet(list, pos);");
      xs("int v = intGet(ints, pos);");
      xs("trPlayerGrantResources(p, t, v);");
    xs("}");
  xs("}");
  xs("void resGive(int p=0, int f=0, int w=0, int g=0, int v=0) {");
    xs("resBulk(p, gResAll, resInts(f, w, g, v));");
  xs("}");
  xs("void resInc(int p=0, string list=\"\", int v=0) {");
    xs("int len = listLen(list);");
    xs("for (pos=1;<=len) trPlayerGrantResources(p, listGet(list, pos), v);");
  xs("}");
  xs("void resSet(int p=0, string list=\"\", int v=0) {");
    xs("int len = listLen(list);");
    xs("for (pos=1;<=len) {");
      xs("string t = listGet(list, pos);");
      xs("int i = v - trPlayerResourceCount(p, t);");
      xs("trPlayerGrantResources(p, t, i);");
    xs("}");
  xs("}");
  xs("vector playerVec(int p=1) {");
    xs("string block = listGet(gPlayerBIDs, p);");
    xs("return(kbGetBlockPosition(block));");
  xs("}");
  xs("vector arenaVec(int a=1) {");
    xs("string block = listGet(gArenaBIDs, a);");
    xs("return(kbGetBlockPosition(block));");
  xs("}");
  xs("string cultureData(int p=0, int type=0) {");
    xs("int cul = kbGetCultureForPlayer(p);");
    xs("int civ = kbGetCivForPlayer(p);");
    xs("string data = cES;");
    xs("if (type==cCivDataGodPowers) {");
      xs("data = listSet(gAgeUpPowers, 3, listGet(gAge3CivPowers, cul+1));");
    xs("} else if (type==cCivDataBuildings) {");
      xs("int armory = 1;");
      xs("if (civ==cCivThor) armory++;");
      xs("data = listGet(gCivArmory, armory);");
      xs("data = listAdd(data, gCivTemple);");
      xs("data = listAdd(data, listGet(gCivArmy1, cul+1));");
      xs("data = listAdd(data, listGet(gCivKeep, cul+1));");
      xs("data = listAdd(data, listGet(gCivArmy2, cul+1));");
      xs("data = listAdd(data, listGet(gCivArmy3, cul+1));");
      xs("data = listAdd(data, gCivMarket);");
    xs("}");
    xs("return (data);");
  xs("}");
  xs("const int dbTeam     = dbTab1;");
  xs("const int dbtPlayers = 1;");
  xs("const int dbtPop     = 2;");
  xs("const int dbtHPs     = 3;");
  xs("const int dbtWins    = 4;");
  xs("const int dbtCurHPs  = 5;");
  xs("int    teamGetHPs(int r=1) { return(dbGetInt(dbTeam, r, dbtHPs)); }");
  xs("int    teamGetPop(int r=1) { return(dbGetInt(dbTeam, r, dbtPop)); }");
  xs("int    teamGetWins(int r=1) { return(dbGetInt(dbTeam, r, dbtWins)); }");
  xs("string teamGetPlayers(int r=1) { return(dbGetStr(dbTeam, r, dbtPlayers)); }");
  xs("void   teamSetPlayers(int r=1, string v=\"\") { dbSetStr(dbTeam, r, dbtPlayers, v); }");
  xs("string teamAddPlayer(int r=1, int p=0) { return(dbAdd2d(dbTeam, r, dbtPlayers, p)); }");
  xs("int    teamIncHPs(int r=1, int v=0) { return(dbAccum(dbTeam, r, dbtHPs, v)); }");
  xs("int    teamIncPop(int r=1, int v=0) { return(dbAccum(dbTeam, r, dbtPop, v)); }");
  xs("int    teamIncWins(int r=1) { return(dbAccum(dbTeam, r, dbtWins)); }");
  xs("void   teamSetHPs(int r=1, int v=0) { dbSetInt(dbTeam, r, dbtHPs, v); }");
  xs("void   teamSetCurHPs(int r=1, int v=0) { dbSetInt(dbTeam, r, dbtCurHPs, v); }");
  xs("void   teamSetPop(int r=1, int v=0) { dbSetInt(dbTeam, r, dbtPop, v); }");
  xs("int    teamGetCurHPs(int r=1) { return(dbGetInt(dbTeam, r, dbtCurHPs)); }");
  xs("int    teamIncCurHPs(int r=1, int v=0) { return(dbAccum(dbTeam, r, dbtCurHPs, v)); }");
  xs("const int dbPlayer  = dbTab2;");
  xs("const int dbpAge    = 1;");
  xs("const int dbpPop    = 2;");
  xs("const int dbpHPs    = 3;");
  xs("const int dbpHPsTot = 4;");
  xs("const int dbpPopTot = 5;");
  xs("const int dbpHPsSrv = 6;");
  xs("const int dbpPopSrv = 7;");
  xs("const int dbpBank   = 8;");
  xs("int    playerGetAge(int r=1) { return(dbGetInt(dbPlayer, r, dbpAge)); }");
  xs("int    playerGetHPs(int r=1) { return(dbGetInt(dbPlayer, r, dbpHPs)); }");
  xs("int    playerGetPop(int r=1) { return(dbGetInt(dbPlayer, r, dbpPop)); }");
  xs("void   playerSetAge(int r=1, int v=0) { dbSetInt(dbPlayer, r, dbpAge, v); }");
  xs("void   playerSetHPs(int r=1, int v=0) { dbSetInt(dbPlayer, r, dbpHPs, v); }");
  xs("void   playerSetPop(int r=1, int v=0) { dbSetInt(dbPlayer, r, dbpPop, v); }");
  xs("int    playerGetHPsTot(int r=1) { return(dbGetInt(dbPlayer, r, dbpHPsTot)); }");
  xs("int    playerIncHPsTot(int r=1, int v=0) { return(dbAccum(dbPlayer, r, dbpHPsTot, v)); }");
  xs("int    playerGetPopTot(int r=1) { return(dbGetInt(dbPlayer, r, dbpPopTot)); }");
  xs("int    playerIncPopTot(int r=1, int v=0) { return(dbAccum(dbPlayer, r, dbpPopTot, v)); }");
  xs("int    playerGetHPsSrv(int r=1) { return(dbGetInt(dbPlayer, r, dbpHPsSrv)); }");
  xs("int    playerIncHPsSrv(int r=1, int v=0) { return(dbAccum(dbPlayer, r, dbpHPsSrv, v)); }");
  xs("int    playerGetPopSrv(int r=1) { return(dbGetInt(dbPlayer, r, dbpPopSrv)); }");
  xs("int    playerIncPopSrv(int r=1, int v=0) { return(dbAccum(dbPlayer, r, dbpPopSrv, v)); }");
  xs("string playerGetBank(int r=1) { return(dbGetStr(dbPlayer, r, dbpBank)); }");
  xs("void   playerSetBank(int r=1, string v=\"\") { dbSetStr(dbPlayer, r, dbpBank, v); }");
  xs("string playerAgePower(int p=0, int age=0) {");
    xs("return(listGet(gAgeUpPowers, age+1));");
  xs("}");
  xs("bool playerJustQuit(int p=0) {");
    xs("return(playerGetAge(p)!=-1);");
  xs("}");
  xs("void playerGameOver(int p=0) {");
    xs("trPlayerKillAllUnits(p);");
    xs("trPlayerKillAllBuildings(p);");
    xs("trSetPlayerDefeated(p);");
    xs("playerSetAge(p, -1);");
  xs("}");
  xs("string playerGrantPower(int p=0, int age=0, int uses=0) {");
    xs("string power = playerAgePower(p, age);");
    xs("if (uses>0) trChatSendToPlayer(0, p, csGranted + cSP + power);");
    xs("trTechGodPowerAtPosition(p, playerAgePower(p, age), uses, age+1);");
  xs("}");
  xs("string playerName(int p=0) {");
    xs("return(listGet(gPlayers, p));");
  xs("}");
  xs("void playerResPop() {");
    xs("for (p=1;<cNumberPlayers) {");
      xs("resSet(p, gFavor, 0);");
      xs("resBulk(p, gResAll, playerGetBank(p));");
    xs("}");
  xs("}");
  xs("void playerResPush() {");
    xs("for (p=1;<cNumberPlayers) {");
      xs("string ints = cES;");
      xs("for (pos=1;<=4) {");
        xs("string t = listGet(gResAll, pos);");
        xs("int v = trPlayerResourceCount(p, t);");
        xs("ints = intAdd(ints, v);");
        xs("trPlayerGrantResources(p, t, 0-v);");
      xs("}");
      xs("playerSetBank(p, ints);");
    xs("}");
  xs("}");
  xs("void playerAgedUp(int p=0, int age=0) {");
    xs("playerSetAge(p, age);");
    xs("playerGrantPower(p, cAge1, 1);");
    xs("playerGrantPower(p, age, 1);");
  xs("}");
  xs("bool gameBlockUnits(string list=\"\") {");
    xs("int len = listLen(list);");
    xs("for (pos=1;<=len) {");
      xs("string t = listGet(list, pos);");
      xs("for (p=1;<cNumberPlayers) trForbidProtounit(p, t);");
    xs("}");
  xs("}");
  xs("int gameTimerLeft() {");
    xs("return (gBuildEnds-trTime());");
  xs("}");
  xs("void gameMusic(int mode=0, int track=0) {");
    xs("int event = -1;");
    xs("if (mode==1) event = 420;");
    xs("string file = tracks(mode, track);");
    xs("chatf(csNowPlaying, file);");
    xs("trSoundPlayDialog(file + gMP3, cN1, event, true, cES, cES);");
  xs("}");
  xs("void gameSound(string file=\"\") {");
    xs("trSoundPlayFN(file, cN1, -1, cES, cES);");
  xs("}");
  xs("void gameMusicBattle() {");
    xs("gameMusic(1, gBattleSong);");
    xs("gBattleSong = (gBattleSong + aiRandInt(3)) %% 17;");
  xs("}");
  xs("void gameMusicBuild() {");
    xs("trMusicStop();");
    xs("gameMusic(2, gBuildSong);");
    xs("gBuildSong = (gBuildSong + aiRandInt(3)) %% 10;");
  xs("}");
  xs("void gameOver(int winner=0) {");
    xs("for (t=1;<=gNumberTeams) {");
      xs("string players = teamGetPlayers(t);");
      xs("int pCnt = intLen(players);");
      xs("if (pCnt==0) continue;");
      xs("string data = t + cPI + teamGetWins(t);");
      xs("chatf(csTeamWonRounds, data);");
      xs("for (pos=1;<=pCnt) {");
        xs("int p = intGet(players, pos);");
        xs("int totHPs = playerGetHPsTot(p);");
        xs("int totPop = playerGetPopTot(p);");
        xs("int srvHPs = playerGetHPsSrv(p);");
        xs("int srvPop = playerGetPopSrv(p);");
        xs("string pctPop = percent(srvPop, totPop);");
        xs("string pctHPs = percent(srvHPs, totHPs);");
        xs("int avgPop = round((totPop+0.0)/gRound);");
        xs("int avgHPs = round((totHPs+0.0)/gRound);");
        xs("int avgUnitHPs = totHPs/totPop;");
        xs("chatColor(playerName(p) + cCL, p);");
        xs("data = totPop + cPI + srvPop + cPI + pctPop + cPI + avgPop;");
        xs("chatColorf(csSumPop, data, p);");
        xs("data = totHPs + cPI + srvHPs + cPI + pctHPs + cPI + avgHPs;");
        xs("chatColorf(csSumHPs, data, p);");
        xs("chatColorf(csAvgHPs, str(avgUnitHPs), p);");
      xs("}");
    xs("}");
    xs("chat(csThanks);");
    xs("alert(csEgg);");
    xs("trMusicStop();");
    xs("gameSound(gCackle);");
    xs("gameMusic(0);");
    xs("for (p=1;<cNumberPlayers) {");
      xs("if (kbGetPlayerTeam(p)==winner) {");
        xs("trSetPlayerWon(p);");
      xs("} else {");
        xs("playerGameOver(p);");
      xs("}");
    xs("}");
    xs("xsDisableRule(gBattling);");
  xs("}");
  xs("int armyCnt(int p=0) {");
    xs("kbPlayerStore();");
    xs("xsSetContextPlayer(p);");
    xs("int aCnt = kbArmyGetNumberUnits(kbArmyGetID(gArmy));");
    xs("kbPlayerRestore();");
    xs("return(aCnt);");
  xs("}");
  xs("int teamLast(int t=0) {");
    xs("int alive = 0;");
    xs("int last = 0;");
    xs("for (p=1;<cNumberPlayers) {");
      xs("if (kbGetPlayerTeam(p)!=t) continue;");
      xs("if (armyCnt(p)==0) continue;");
      xs("alive++;");
      xs("last = p;");
    xs("}");
    xs("if (alive==1) return(last);");
    xs("return(0);");
  xs("}");
  xs("string teamName(int t=0) {");
    xs("string name = cES;");
    xs("for (p=1;<cNumberPlayers) {");
      xs("if (kbGetPlayerTeam(p)!=t) continue;");
      xs("if (armyCnt(p)==0) continue;");
      xs("name = name + xsSubString(playerName(p), 3, 0);");
    xs("}");
    xs("return(name);");
  xs("}");
  xs("string gameStatLine(int thp=0, int chp=0, int pop=0) {");
    xs("return(percent(chp, thp) + cPI + chp + cPI + pop);");
  xs("}");
  xs("void gameStatsShow(bool health = false) {");
    xs("int timeout = gameTimerLeft();");
    xs("if (health) timeout = 9;");
    xs("trChatHistoryClear();");
    xs("for (t=1;<=gNumberTeams) {");
      xs("int curHPs = teamGetCurHPs(t);");
      xs("if (curHPs==0) continue;");
      xs("string players = teamGetPlayers(t);");
      xs("int pCnt = intLen(players);");
      xs("if (pCnt==0) continue;");
      xs("int p = intGet(players, 1);");
      xs("int alive = p;");
      xs("if (pCnt>1) alive = teamLast(t);");
      xs("string roster = cES;");
      xs("string data = cES;");
      xs("string name = cES;");
      xs("string stats = gameStatLine(teamGetHPs(t), curHPs, teamGetPop(t));");
      xs("stats = stats + cPI + teamGetWins(t) + cSP + csWins;");
      xs("if (alive!=0) {");
        xs("name = playerName(alive);");
      xs("} else {");
        xs("for (pos=1;<=pCnt) {");
          xs("p = intGet(players, pos);");
          xs("int pop = playerGetPop(p);");
          xs("if (pop==0) continue;");
          xs("name = name + xsSubString(playerName(p), 3, 0);");
          xs("data = gameStatLine(teamGetHPs(t), playerGetHPs(p), pop);");
          xs("roster = listSet(roster, pos, data, cLB);");
        xs("}");
      xs("}");
      xs("data = stats + cPI + name;");
      xs("if (alive!=0) data = playerColor(alive, data);");
      xs("chat(data);");
      xs("for (pos=1;<=pCnt) {");
        xs("data = listGet(roster, pos, cLB);");
        xs("p = intGet(players, pos);");
        xs("if (data==cES) continue;");
        xs("data = cSP + cSP + cSP + listAdd(data, playerName(p));");
        xs("chatColor(data, p);");
      xs("}");
    xs("}");
  xs("}");
  xs("void protoUnitLOS(int p=0, int tid=0, int los=0) {");
    xs("trModifyProtounit(kbPU(tid), p, cUnitStatLOS, los);");
  xs("}");
  xs("bool unitBlocked(int uid=0) {");
    xs("if (kbUnitIsType(uid, cUnitTypeMilitary)==false) return(true);");
    xs("int ubt = kbGetUnitBaseTypeID(uid);");
    xs("if (kbUnitGetMovementType(ubt)==cMovementTypeAir) return(true);");
    xs("return(false);");
  xs("}");
  xs("void unitKill(int uid=0, int p=0) {");
    xs("if (p>0) resInc(p, gResFWG, kbUnitGetCurrentAICost(uid)/3);");
    xs("trUnitSelectClear();");
    xs("trUnitSelectByID(uid);");
    xs("trUnitDelete(true);");
  xs("}");
  xs("void unitMove(int p=1, int aid=1, int pos=1, int x=0, int z=0) {");
    xs("int uid = kbArmyGetUnitID(aid, pos);");
    xs("string PUN = kbGetProtoUnitName(kbGetUnitBaseTypeID(uid));");
    xs("kbArmyRemoveUnit(aid, uid);");
    xs("unitKill(uid);");
    xs("trArmyDispatch(p + cCO + aid, PUN, 1, x, 0, z, 1, false);");
  xs("}");
  xs("int unitQryRow(int r=0) {");
    xs("return(kbUnitQueryGetResult(gQueryID, r));");
  xs("}");
  xs("int unitQryRun(int p=0, int uid=0, int us=2) {");
    xs("if (gQueryID==-1) gQueryID = kbUnitQueryCreate(gGameID);");
    xs("if (gQueryID==-1) return(-1);");
    xs("kbUnitQueryResetData(gQueryID);");
    xs("kbUnitQuerySetPlayerID(gQueryID, p);");
    xs("kbUnitQuerySetUnitType(gQueryID, uid);");
    xs("kbUnitQuerySetState(gQueryID, us);");
    xs("return(kbUnitQueryExecute(gQueryID));");
  xs("}");
  xs("int armyClearDead(int aid = 0) {");
    xs("kbLookAtAllUnitsOnMap();");
    xs("int aCnt = kbArmyGetNumberUnits(aid);");
    xs("int aHPs = 0;");
    xs("int uHPs = 0;");
    xs("for (j=1;<=aCnt) {");
      xs("int uid = kbArmyGetUnitID(aid, aCnt-j);");
      xs("uHPs = kbUnitGetCurrentHitpoints(uid);");
      xs("if (kbUnitGetHealth(uid)==0) kbArmyRemoveUnit(aid, uid);");
      xs("aHPs = aHPs + uHPs;");
    xs("}");
    xs("return(aHPs);");
  xs("}");
  xs("void armyRefund() {");
    xs("kbPlayerStore();");
    xs("for (p=1;<cNumberPlayers) {");
      xs("xsSetContextPlayer(p);");
      xs("int aid = kbArmyGetID(gArmy);");
      xs("int aHPs = armyClearDead(aid);");
      xs("int aCnt = kbArmyGetNumberUnits(aid);");
      xs("playerIncHPsSrv(p, aHPs);");
      xs("playerIncPopSrv(p, aCnt);");
      xs("int bonus = 0;");
      xs("for (j=1;<=aCnt) {");
        xs("int uid = kbArmyGetUnitID(aid, aCnt-j);");
        xs("bonus = bonus + kbUnitGetCurrentAICost(uid)/5;");
        xs("kbArmyRemoveUnit(aid, uid);");
        xs("unitKill(uid);");
      xs("}");
      xs("if (aCnt>0) {");
        xs("gMsg = print(csForSurviving, str(aCnt));");
        xs("resAward(p, gMsg, bonus, bonus, bonus, aCnt);");
      xs("}");
    xs("}");
    xs("kbPlayerRestore();");
  xs("}");
  xs("string unitDispatch(int tid=0, vector v=vector(0,0,0)) {");
    xs("string bid = cES+trGetNextUnitScenarioNameNumber();");
    xs("trArmyDispatch(gArmy0, kbPU(tid), 1, xsVectorGetX(v), 0, xsVectorGetZ(v), 0, false);");
    xs("trUnitSelectClear();");
    xs("trUnitSelect(bid);");
    xs("trUnitTeleport(xsVectorGetX(v), 0, xsVectorGetZ(v));");
    xs("return(bid);");
  xs("}");
  xs("void arenaRelicSet() {");
    xs("string techs = listGet(gRelicsArena, gArena);");
    xs("if (techs==c0) return;");
    xs("gRelicTech = intRandom(techs);");
    xs("string bid = listGet(gActiveBIDs, gArena);");
    xs("vector v = arenaVec(gArena);");
    xs("trUnitSelectClear();");
    xs("trUnitSelect(bid);");
    xs("trUnitConvert(0);");
    xs("trSetRelicType(gRelicTech);");
    xs("trUnitTeleport(xsVectorGetX(v), 0, xsVectorGetZ(v));");
  xs("}");
  xs("void arenaRelicCreate() {");
    xs("string bid = unitDispatch(cUnitTypeRelic, arenaVec(gArena));");
    xs("if (gArena!=1) trSetSelectedScale(2,4,2);");
    xs("gActiveBIDs = listSet(gActiveBIDs, gArena, bid);");
  xs("}");
  xs("void arenaRelicAward(int team=0) {");
    xs("if (gArena!=1) return;");
    xs("for (p=1;<cNumberPlayers) {");
      xs("if (kbGetPlayerTeam(p)==team) {");
        xs("string bid = unitDispatch(cUnitTypeRelic, playerVec(p));");
        xs("trSetRelicType(gRelicTech);");
      xs("}");
    xs("}");
  xs("}");
  xs("void arenaEnd() {");
    xs("xsDisableRule(gArenaHB+gArena);");
    xs("for (p=1;<cNumberPlayers) {");
      xs("if (trTechStatusActive(p, gRelicTech)) trTechSetStatus(p, gRelicTech, cTechStatusUnobtainable);");
      xs("if (trTechStatusActive(p, cTechEclipseActive)) trTechSetStatus(p, cTechEclipseActive, cTechStatusUnobtainable);");
      xs("if (trTechStatusActive(p, cTechJourneyActive)) trTechSetStatus(p, cTechJourneyActive, cTechStatusUnobtainable);");
    xs("}");
    xs("arenaRelicSet();");
  xs("}");
  xs("void arenaBegin() {");
    xs("xsEnableRule(gArenaHB+gArena);");
  xs("}");
  xs("void battleWon(int team=0) {");
    xs("int wins = teamGetWins(team);");
    xs("string names = cES;");
    xs("for (p=1;<cNumberPlayers) {");
      xs("if (kbGetPlayerTeam(p)==team) names = listAdd(names, playerName(p), csAnd);");
    xs("}");
    xs("alertf(csCongrats, names);");
    xs("arenaRelicAward(team);");
  xs("}");
  xs("bool checkVictory(int winner=0) {");
    xs("if (teamIncWins(winner)==gGameWins) {");
      xs("gameOver(winner);");
      xs("return(true);");
    xs("}");
    xs("battleWon(winner);");
    xs("return(false);");
  xs("}");
  xs("void battleCowards(int aid=0) {");
    xs("int aCnt = kbArmyGetNumberUnits(aid);");
    xs("for (j=1;<=aCnt) {");
      xs("int uid = kbArmyGetUnitID(aid, aCnt-j);");
      xs("if (kbUnitGetHealth(uid)==0) continue;");
      xs("vector v = arenaVec(gArena);");
      xs("trUnitSelectClear();");
      xs("trUnitSelectByID(uid);");
      xs("float dist = trUnitDistanceToPoint(xsVectorGetX(v), 0, xsVectorGetZ(v));");
      xs("if (dist > gArenaRadius) {");
        xs("trUnitMoveToPoint(xsVectorGetX(v), 0, xsVectorGetZ(v));");
        xs("int amt = 3 + (dist - gArenaRadius);");
        xs("vector up = kbUnitGetPosition(uid);");
        xs("trDamageUnit(amt);");
        xs("trUnitHighlight(2);");
        xs("trUnitCreate(kbPU(cUnitTypeInfernoFlame), gDefault, xsVectorGetX(up), 0, xsVectorGetZ(up), 0, 1);");
      xs("}");
    xs("}");
  xs("}");
  xs("int battleUpdate() {");
    xs("int teams = 0;");
    xs("int winner = 0;");
    xs("kbPlayerStore();");
    xs("for (t=1;<=gNumberTeams) {");
      xs("teamSetCurHPs(t, 0);");
      xs("teamSetPop(t, 0);");
      xs("string players = teamGetPlayers(t);");
      xs("int pCnt = intLen(players);");
      xs("if (pCnt==0) continue;");
      xs("for (pos=1;<=pCnt) {");
        xs("int p = intGet(players, pos);");
        xs("if (trPlayerActive(p)) {");
          xs("xsSetContextPlayer(p);");
          xs("int aid = kbArmyGetID(gArmy);");
          xs("int aHPs = armyClearDead(aid);");
          xs("int aCnt = kbArmyGetNumberUnits(aid);");
          xs("playerSetPop(p, aCnt);");
          xs("playerSetHPs(p, aHPs);");
          xs("teamIncPop(t, aCnt);");
          xs("teamIncCurHPs(t, aHPs);");
          xs("battleCowards(aid);");
        xs("}");
      xs("}");
      xs("if (teamGetPop(t)>0 && teamGetCurHPs(t)>0) {");
        xs("teams++;");
        xs("winner = t;");
      xs("}");
    xs("}");
    xs("kbPlayerRestore();");
    xs("gameStatsShow(true);");
    xs("if (teams>1) return(0);");
    xs("return(winner);");
  xs("}");
  xs("void emptyBuildings(int p=0) {");
    xs("for (pos=0;<8) {");
      xs("int aid = kbArmyGetID(gArmy + pos);");
      xs("int uid = kbArmyGetUnitID(aid, 0);");
      xs("trUnitSelectClear();");
      xs("trUnitSelectByID(uid);");
      xs("trUnitEjectContained();");
    xs("}");
  xs("}");
  xs("void revealArea(vector v=vector(0,0,0)) {");
    xs("for (p=0;<cNumberPlayers) trUnitCreate(kbPU(cUnitTypeRevealer), gDefault, xsVectorGetX(v), 0, xsVectorGetZ(v), 0, p);");
  xs("}");
  xs("bool initArena() {");
    xs("if (intGet(gArenasInit, gArena)==1) return(false);");
    xs("revealArea(arenaVec(gArena));");
    xs("gArenasInit = intSet(gArenasInit, gArena, 1);");
    xs("return(true);");
  xs("}");
  xs("void initArenaWinRelic() {");
    xs("if (initArena()) {");
      xs("alert(csRoundWinRelic);");
      xs("arenaRelicCreate();");
      xs("arenaRelicSet();");
    xs("}");
  xs("}");
  xs("void initArenaLava() {");
    xs("if (initArena()) {");
      xs("alert(csRoundControlRelic);");
      xs("unitDispatch(cUnitTypeTartarianGate, arenaVec(gArena));");
      xs("trSetSelectedScale(1, .5, 1);");
      xs("arenaRelicCreate();");
      xs("arenaRelicSet();");
    xs("}");
  xs("}");
  xs("void initArenaHealing() {");
    xs("if (initArena()) {");
      xs("alert(csRoundControlHeal);");
      xs("trUnitSelectClear();");
      xs("trUnitSelect(gDefault);");
      xs("trTechInvokeGodPower(0, gHealString, arenaVec(gArena), vector(0, 0, 0));");
    xs("}");
  xs("}");
  xs("void initArenaResources() {");
    xs("if (initArena()) {");
      xs("alert(csRoundControlFood);");
      xs("string bid = unitDispatch(cUnitTypeBerryBush, arenaVec(gArena));");
      xs("trSetSelectedScale(1.5, 2.5, 1.5);");
      xs("gActiveBIDs = listSet(gActiveBIDs, gArena, bid);");
    xs("}");
  xs("}");
  xs("void initArenaMystic() {");
    xs("for (p=1;<cNumberPlayers) {");
      xs("if (trTechStatusActive(p, cTechEclipseActive)) continue;");
      xs("trTechSetStatus(p, cTechEclipseActive, cTechStatusActive);");
    xs("}");
  xs("}");
  xs("void initArenaSpeed() {");
    xs("if (initArena()) {");
      xs("alert(csRoundControlSpeed);");
      xs("string bid = unitDispatch(cUnitTypeJadeMineTiny, arenaVec(gArena));");
      xs("trSetSelectedScale(.5, 3, .5);");
      xs("gActiveBIDs = listSet(gActiveBIDs, gArena, bid);");
    xs("}");
  xs("}");
  xs("void initArenaRelic() {");
    xs("if (initArena()) {");
      xs("alert(csRoundControlRelic);");
      xs("arenaRelicCreate();");
      xs("arenaRelicSet();");
    xs("}");
  xs("}");
  xs("string unitConvertTeam() {");
    xs("string bid = listGet(gActiveBIDs, gArena);");
    xs("trUnitSelectClear();");
    xs("trUnitSelect(bid);");
    xs("string pcnts = cES;");
    xs("int max = 0;");
    xs("int twin = 0;");
    xs("int owner = 0;");
    xs("for (t=1;<=gNumberTeams) {");
      xs("int tcnt = 0;");
      xs("string players = teamGetPlayers(t);");
      xs("int pcnt = intLen(players);");
      xs("for (pos=1;<=pcnt) {");
        xs("int p = intGet(players, pos);");
        xs("if (trUnitIsOwnedBy(p)) owner = p;");
        xs("int ucnt = trCountUnitsInArea(bid, p, gUnit, gArenaRadius * .5);");
        xs("pcnts = intSet(pcnts, p, ucnt);");
        xs("tcnt = tcnt + ucnt;");
      xs("}");
      xs("if (tcnt > max) {");
        xs("twin = t;");
        xs("max = tcnt;");
      xs("}");
    xs("}");
    xs("players = teamGetPlayers(twin);");
    xs("pcnt = intLen(players);");
    xs("int pmax = 0;");
    xs("int pwin = 0;");
    xs("for (pos=1;<=pcnt) {");
      xs("p = intGet(players, pos);");
      xs("ucnt = intGet(pcnts, p);");
      xs("if (ucnt > pmax) {");
        xs("pwin = p;");
        xs("pmax = ucnt;");
      xs("}");
    xs("}");
    xs("if (kbGetPlayerTeam(owner)!=kbGetPlayerTeam(pwin)) {");
      xs("trUnitConvert(pwin);");
      xs("gameSound(gConvert);");
    xs("} else if (pwin!=owner) {");
      xs("trUnitConvert(pwin);");
      xs("gameSound(gYoink);");
    xs("}");
    xs("string rtn = intAdd(cES + twin, pwin);");
    xs("rtn = intAdd(rtn, owner);");
    xs("rtn = listAdd(rtn, pcnts);");
    xs("return(rtn);");
  xs("}");
  xs("void arenaSpeedHB() {");
    xs("string data = unitConvertTeam();");
    xs("string wins = listGet(data, 1);");
    xs("string pcnts = listGet(data, 2);");
    xs("int pwin = intGet(wins, 2);");
    xs("int cnt = intGet(pcnts, pwin);");
    xs("for (p=1;<cNumberPlayers) {");
      xs("bool hasTech = trTechStatusActive(p, cTechJourneyActive);");
      xs("if (kbGetPlayerTeam(p)==kbGetPlayerTeam(pwin)) {");
        xs("if (hasTech==false) trTechSetStatus(p, cTechJourneyActive, cTechStatusActive);");
      xs("} else if (hasTech==true) {");
        xs("trTechSetStatus(p, cTechJourneyActive, cTechStatusUnobtainable);");
      xs("}");
    xs("}");
  xs("}");
  xs("void arenaResourcesHB() {");
    xs("string data = unitConvertTeam();");
    xs("string wins = listGet(data, 1);");
    xs("string pcnts = listGet(data, 2);");
    xs("int twin = intGet(wins, 1);");
    xs("int pwin = intGet(wins, 2);");
    xs("string players = teamGetPlayers(twin);");
    xs("int pcnt = intLen(players);");
    xs("for (pos=1;<=pcnt) {");
      xs("int p = intGet(players, pos);");
      xs("int cnt = intGet(pcnts, p);");
      xs("trPlayerGrantResources(p, gFood, cnt);");
    xs("}");
  xs("}");
  xs("void arenaRelicHB() {");
    xs("initArenaRelic();");
    xs("string data = unitConvertTeam();");
    xs("string wins = listGet(data, 1);");
    xs("int twin = intGet(wins, 1);");
    xs("int pwin = intGet(wins, 2);");
    xs("for (p=1;<cNumberPlayers) {");
      xs("bool hasTech = trTechStatusActive(p, gRelicTech);");
      xs("if (kbGetPlayerTeam(p)==kbGetPlayerTeam(pwin)) {");
        xs("if (hasTech==false) trTechSetStatus(p, gRelicTech, cTechStatusActive);");
      xs("} else if (hasTech==true) {");
        xs("trTechSetStatus(p, gRelicTech, cTechStatusUnobtainable);");
      xs("}");
    xs("}");
  xs("}");
  xs("void battleBegin() {");
    xs("trSetLighting(listGet(gBattleSky, gArena), 3.0);");
    xs("gameSound(gBattleCry);");
    xs("playerResPush();");
    xs("emptyBuildings();");
    xs("gArena = (gRound-1)%%7 + 1;");
    xs("arenaBegin();");
    xs("vector v = arenaVec(gArena);");
    xs("float ptX = xsVectorGetX(v);");
    xs("float ptZ = xsVectorGetZ(v);");
    xs("float angle = 360/gNumberTeams;");
    xs("float start = aiRandInt(360);");
    xs("kbPlayerStore();");
    xs("for (t=1;<=gNumberTeams) {");
      xs("angle = start + 360/gNumberTeams * t;");
      xs("teamSetHPs(t, 0);");
      xs("string players = teamGetPlayers(t);");
      xs("int pCnt = intLen(players);");
      xs("if (pCnt==0) continue;");
      xs("for (pos=1;<=pCnt) {");
        xs("int p = intGet(players, pos);");
        xs("int tCnt = 0;");
        xs("if (trPlayerActive(p)) {");
          xs("xsSetContextPlayer(p);");
          xs("emptyBuildings(p);");
          xs("int aid = kbArmyGetID(gArmy);");
          xs("int aHPs = armyClearDead(aid);");
          xs("int aCnt = kbArmyGetNumberUnits(aid);");
          xs("tCnt = tCnt + aCnt;");
          xs("playerIncPopTot(p, aCnt);");
          xs("playerIncHPsTot(p, aHPs);");
          xs("teamIncHPs(t, aHPs);");
          xs("float row = 0;");
          xs("for (j=(aCnt-1);>=0) {");
            xs("float cell = (j%%6) * 3.0;");
            xs("if (cell==0) row = row + 3.0;");
            xs("int atX = circleAtX(angle+cell, gArenaRadius-row, ptX);");
            xs("int atZ = circleAtZ(angle+cell, gArenaRadius-row, ptZ);");
            xs("unitMove(p, aid, j, atX, atZ);");
          xs("}");
          xs("atX = circleAtX(angle + 25, 10, ptX);");
          xs("atZ = circleAtZ(angle + 25, 10, ptZ);");
          xs("trUnitSelectClear();");
          xs("trArmySelect(p + cCO + aid);");
          xs("trUnitMoveToPoint(atX, 0, atZ);");
        xs("}");
        xs("angle = angle + aCnt + 5;");
      xs("}");
    xs("}");
    xs("kbPlayerRestore();");
  xs("}");
  xs("void buildArmy() {");
    xs("for (t=1;<=gNumberTeams) {");
      xs("teamSetPop(t);");
      xs("teamSetHPs(t);");
    xs("}");
    xs("kbPlayerStore();");
    xs("for (p=1;<cNumberPlayers) {");
      xs("if (trPlayerActive(p)) {");
        xs("xsSetContextPlayer(p);");
        xs("int team = kbGetPlayerTeam(p);");
        xs("int pCnt = intLen(teamGetPlayers(team));");
        xs("float ratio = gMinTeamCnt / pCnt;");
        xs("int MaxUnits = 30 * ratio;");
        xs("int aid = kbArmyGetID(gArmy);");
        xs("int aHPs = armyClearDead(aid);");
        xs("int aCnt = kbArmyGetNumberUnits(aid);");
        xs("if (aCnt<MaxUnits) {");
          xs("int myCnt = unitQryRun(p, cUnitTypeUnit, cUnitStateAlive);");
          xs("for (j=0;<myCnt) {");
            xs("int uid = unitQryRow(j);");
            xs("if (unitBlocked(uid)) {");
            xs("unitKill(uid, p);");
            xs("} else if (aCnt<MaxUnits) {");
            xs("kbArmyAddUnit(aid, uid);");
            xs("aCnt = kbArmyGetNumberUnits(aid);");
            xs("}");
          xs("}");
        xs("}");
        xs("aCnt = kbArmyGetNumberUnits(aid);");
        xs("playerSetPop(p, aCnt);");
        xs("playerSetHPs(p, aHPs);");
        xs("teamIncPop(team, aCnt);");
        xs("teamIncHPs(team, aHPs);");
        xs("aCnt = gameTimerLeft();");
        xs("if (aCnt%%5==3) {");
          xs("vector v = playerVec(p);");
          xs("trUnitSelectClear();");
          xs("trArmySelect(p + cCO + aid);");
          xs("trUnitMoveToPoint(xsVectorGetX(v), 0, xsVectorGetZ(v));");
        xs("}");
      xs("}");
    xs("}");
    xs("for (t=1;<=gNumberTeams) teamSetCurHPs(t, teamGetHPs(t));");
    xs("kbPlayerRestore();");
  xs("}");
  xs("void buildTeams() {");
    xs("int min = 12;");
    xs("for (t=1;<=gNumberTeams) {");
      xs("string players = teamGetPlayers(t);");
      xs("int pCnt = intLen(players);");
      xs("if (pCnt==0) continue;");
      xs("string alive = cES;");
      xs("for (pos=1;<=pCnt) {");
        xs("int p = intGet(players, pos);");
        xs("if (trPlayerActive(p)) {");
          xs("alive = intAdd(alive, p);");
        xs("} else if (playerJustQuit(p)) {");
          xs("playerGameOver(p);");
          xs("gMsg = listAdd(playerName(p), str(t));");
          xs("chatf(csRemovedTeam, gMsg);");
        xs("}");
      xs("}");
      xs("teamSetPlayers(t, alive);");
      xs("pCnt = intLen(alive);");
      xs("if (pCnt==0) {");
        xs("chatf(csRemovedGame, str(t));");
      xs("} else {");
        xs("min = xsMin(min, pCnt);");
      xs("}");
    xs("}");
    xs("gMinTeamCnt = min;");
  xs("}");
  xs("void buildResources() {");
    xs("for (t=1;<=gNumberTeams) {");
      xs("string players = teamGetPlayers(t);");
      xs("int pCnt = intLen(players);");
      xs("float ratio = gMinTeamCnt / pCnt;");
      xs("for (pos=1;<=pCnt) {");
        xs("int p = intGet(players, pos);");
        xs("gMsg = print(csForRound, str(gRound));");
        xs("resAward(p, gMsg, gResRound, gResRound * 1.25, gResRound, gFavRound, ratio);");
      xs("}");
    xs("}");
    xs("gResRound = gResRound + gResInc;");
    xs("gFavRound = gFavRound + gFavInc;");
  xs("}");
  xs("void buildTechUpdate() {");
    xs("for (p=1;<cNumberPlayers) {");
      xs("if (gRound==3) trTechSetStatus(p, cTechAge3Aphrodite, cTechStatusAvailable);");
      xs("if (gRound==5) trTechSetStatus(p, cTechAge4Artemis, cTechStatusAvailable);");
      xs("if ((gRound %% 6)==0) playerGrantPower(p, cAge1, 1);");
      xs("if ((gRound %% 8)==0) playerGrantPower(p, cAge2, 1);");
    xs("}");
  xs("}");
  xs("void buildBegin() {");
    xs("gBuildEnds = trTime() + gBuildTime;");
    xs("gRound++;");
    xs("buildTeams();");
    xs("buildResources();");
    xs("buildTechUpdate();");
    xs("gameSound(gBuildCry);");
    xs("trSetLighting(gBuildSky, 5.0);");
    xs("gameMusicBuild();");
    xs("gMsg = print(csRoundStarts, str(gRound));");
    xs("trCounterAddTime(gGameID, gameTimerLeft(), 1, gMsg, -1);");
  xs("}");
  xs("void setupOptions() {");
    xs("gGameWins = 7 + cMapSize * 4;");
    xs("int speed = 7;");
    xs("gBuildTime = 55;");
    xs("if (vcGetGameplayMode()==cGameModeLightning) {");
      xs("speed = 10;");
      xs("gBuildTime = 45;");
    xs("}");
    xs("if (vcGetGameplayMode()==cGameModeDeathmatch) gResRound = 1000;");
    xs("gResStart = gResRound;");
    xs("trRateResearch(speed);");
    xs("trRateTrain(speed);");
  xs("}");
  xs("void setupVectors() {");
    xs("gArenaXZ = cES;");
    xs("gPlayerXZ = cES;");
    xs("kbPlayerStore();");
    xs("xsSetContextPlayer(0);");
    xs("int aid = kbArmyGetID(gCenters);");
    xs("int aCnt = kbArmyGetNumberUnits(aid);");
    xs("int uid = kbArmyGetUnitID(aid, 0);");
    xs("trUnitSelectClear();");
    xs("trUnitSelectByID(uid);");
    xs("uid = kbArmyGetUnitID(aid, 1);");
    xs("float dist = trUnitDistanceToUnitID(uid);");
    xs("gArenaRadius = dist / 2 - 10;");
    xs("for(j=0;<aCnt) {");
      xs("uid = kbArmyGetUnitID(aid, j);");
      xs("int bid = trGetUnitScenarioNameNumber(uid);");
      xs("if (j<7) {");
        xs("gArenaBIDs = listAdd(gArenaBIDs, cES+bid);");
      xs("} else {");
        xs("gPlayerBIDs = listAdd(gPlayerBIDs, cES+bid);");
      xs("}");
      xs("trUnitSelectByID(uid);");
    xs("}");
    xs("trUnitChangeProtoUnit(kbPU(cUnitTypeCinematicBlock));");
    xs("kbPlayerRestore();");
  xs("}");
  xs("void setupLights() {");
    xs("for (p=0;<cNumberPlayers) revealArea(playerVec(p));");
  xs("}");
  xs("void setupTeams() {");
    xs("gNumberTeams = 0;");
    xs("for (p=1;<cNumberPlayers) {");
      xs("int team = kbGetPlayerTeam(p);");
      xs("gNumberTeams = xsMax(gNumberTeams, team);");
      xs("teamAddPlayer(team, p);");
      xs("resSet(p, gResAll, 0);");
      xs("playerSetAge(p, cAge1);");
    xs("}");
  xs("}");
  xs("void setupTechTree() {");
    xs("for (p=1;<cNumberPlayers) {");
      xs("trPlayerTechTreeEnabledGodPowers(p, false);");
      xs("trTechSetStatus(p, cTechRelicPeltofArgus, cTechStatusActive);");
      xs("for (j = 0;<=41) trTechSetStatus(p, cTechRelicEyeofHorus, cTechStatusActive);");
      xs("for (j = 0;<=10) trTechSetStatus(p, cTechRelicNoseoftheSphinx, cTechStatusActive);");
      xs("trTechSetStatus(p, cTechAge3Aphrodite, cTechStatusUnobtainable);");
      xs("trTechSetStatus(p, cTechAge4Artemis, cTechStatusUnobtainable);");
      xs("trTechSetStatus(p, cTechOdinsFirstRavens, cTechStatusUnobtainable);");
      xs("trTechSetStatus(p, cTechOdinsRavenRespawn, cTechStatusUnobtainable);");
      xs("trTechSetStatus(p, cTechStartingUnitsAtlantean, cTechStatusUnobtainable);");
      xs("trTechSetStatus(p, cTechStartingUnitsEgyptian, cTechStatusUnobtainable);");
      xs("trTechSetStatus(p, cTechStartingUnitsGreek, cTechStatusUnobtainable);");
      xs("trTechSetStatus(p, cTechStartingUnitsNorse, cTechStatusUnobtainable);");
      xs("trTechSetStatus(p, cTechStartingUnitsThor, cTechStatusUnobtainable);");
      xs("trTechSetStatus(p, cTechStartingUnitsChinese, cTechStatusUnobtainable);");
      xs("trTechSetStatus(p, cTechPharaohRespawn, cTechStatusUnobtainable);");
      xs("trTechSetStatus(p, cTechSetAge1Critter, cTechStatusUnobtainable);");
    xs("}");
  xs("}");
  xs("void setupProtoUnits() {");
    xs("gameBlockUnits(gBlockUnits);");
    xs("gameBlockUnits(gBlockGarrison);");
    xs("gameBlockUnits(gBlockFlying);");
    xs("for (p=0;<cNumberPlayers) protoUnitLOS(p, cUnitTypeRevealer, gArenaRadius);");
  xs("}");
  xs("void setupGodPowers() {");
    xs("for (p=1;<cNumberPlayers) {");
      xs("trPlayerSetDiplomacy(p, 0, gEnemy);");
      xs("trPlayerSetDiplomacy(0, p, gEnemy);");
      xs("if (trPlayerActive(p)) {");
        xs("trPlayerKillAllGodPowers(p);");
        xs("for (age=cAge1;<=cAge4) playerGrantPower(p, age, 0);");
        xs("playerGrantPower(p, cAge1, 1);");
      xs("}");
    xs("}");
  xs("}");
  xs("void setupBuildings() {");
    xs("kbPlayerStore();");
    xs("for (p=1;<cNumberPlayers) {");
      xs("xsSetContextPlayer(p);");
      xs("string buildings = cultureData(p, cCivDataBuildings);");
      xs("int aid = kbArmyGetID(gArmy);");
      xs("for (pos=0;<=6) {");
        xs("int uid = kbArmyGetUnitID(aid, pos);");
        xs("trUnitSelectClear();");
        xs("trUnitSelectByID(uid);");
        xs("string building = listGet(buildings, pos+1);");
        xs("trUnitChangeProtoUnit(building);");
      xs("}");
      xs("int aCnt = kbArmyGetNumberUnits(aid);");
      xs("for (j=1;<=aCnt) kbArmyRemoveUnit(aid, kbArmyGetUnitID(aid, aCnt-j));");
    xs("}");
    xs("kbPlayerRestore();");
  xs("}");
  xs("void setupMap() {");
    xs("alert(csEgg);");
    xs("trEventSetHandler(420, gMusicEvent);");
    xs("gBattleSong = aiRandInt(17);");
    xs("setupBuildings();");
  xs("}");
  xs("bool notYet(int when=0, float start=0.0) {");
    xs("return((trTime()-start) < when);");
  xs("}");
  xs("rule _setup highFrequency active {");
    xs("setupOptions();");
    xs("setupVectors();");
    xs("setupLights();");
    xs("setupTeams();");
    xs("setupTechTree();");
    xs("setupProtoUnits();");
    xs("setupGodPowers();");
    xs("setupMap();");
    xs("buildBegin();");
    xs("xsDisableSelf();");
    xs("xsEnableRule(gBuilding);");
  xs("}");
  xs("rule _building minInterval 2 inactive {");
    xs("if (notYet(2, cActivationTime)) return;");
    xs("kbLookAtAllUnitsOnMap();");
    xs("buildArmy();");
    xs("if (gameTimerLeft()>0) {");
      xs("gameStatsShow();");
      xs("return;");
    xs("}");
    xs("battleBegin();");
    xs("xsDisableSelf();");
    xs("xsEnableRule(gBattling);");
  xs("}");
  xs("rule _battling minInterval 2 inactive {");
    xs("if (notYet(2, cActivationTime)) return;");
    xs("kbLookAtAllUnitsOnMap();");
    xs("int winner = battleUpdate();");
    xs("if (winner==0) return;");
    xs("playerResPop();");
    xs("armyRefund();");
    xs("if (checkVictory(winner)) return;");
    xs("arenaEnd();");
    xs("buildBegin();");
    xs("xsDisableSelf();");
    xs("xsEnableRule(gBuilding);");
  xs("}");
  xs("rule _prevent_building minInterval 3 active {");
    xs("if (notYet(3, cActivationTime)) return;");
    xs("kbPlayerStore();");
    xs("string bid = listGet(gActiveBIDs, gArena);");
    xs("int exception = kbGetBlockID(cES+bid);");
    xs("for (p=1;<cNumberPlayers) {");
      xs("if (trPlayerActive(p)) {");
        xs("xsSetContextPlayer(p);");
        xs("int myCnt = unitQryRun(p, cUnitTypeBuilding, cUnitStateBuilding);");
        xs("for (j=0;<myCnt) {");
          xs("int uid = unitQryRow(j);");
          xs("if (uid==exception) continue;");
          xs("unitKill(uid);");
        xs("}");
      xs("}");
    xs("}");
    xs("kbPlayerRestore();");
  xs("}");
  xs("rule _instructions minInterval 6 active {");
    xs("if (notYet(6, cActivationTime)) return;");
    xs("if (gInstr==1) {");
      xs("alertf(csRules1, str(gBuildTime));");
    xs("} else if (gInstr==2) {");
      xs("alert(csRules2);");
    xs("} else if (gInstr==3) {");
      xs("gMsg = listAdd(str(gResStart), str(gResStart*1.25));");
      xs("gMsg = listAdd(gMsg, str(gFavStart));");
      xs("gMsg = listAdd(gMsg, str(gResInc));");
      xs("gMsg = listAdd(gMsg, str(gFavInc));");
      xs("alertf(csRules3, gMsg);");
    xs("} else if (gInstr==4) {");
      xs("alert(csRules4);");
    xs("} else {");
      xs("alertf(csRules5, str(gGameWins));");
      xs("xsDisableSelf();");
    xs("}");
    xs("gInstr++;");
  xs("}");
  xs("rule _ageup minInterval 1 active {");
    xs("if (notYet(1, cActivationTime)) return;");
    xs("for (p=1;<cNumberPlayers) {");
      xs("int age = playerGetAge(p);");
      xs("int cur = kbGetAgeForPlayer(p);");
      xs("if (age!=cur) playerAgedUp(p, cur);");
    xs("}");
  xs("}");
  xs("rule _arenaHB1 minInterval 3 inactive {");
    xs("initArenaWinRelic();");
    xs("xsDisableSelf();");
  xs("}");
  xs("rule _arenaHB2 minInterval 3 inactive {");
    xs("initArenaHealing();");
    xs("xsDisableSelf();");
  xs("}");
  xs("rule _arenaHB3 minInterval 3 inactive {");
    xs("arenaRelicHB();");
  xs("}");
  xs("rule _arenaHB4 minInterval 3 inactive {");
    xs("initArenaSpeed();");
    xs("arenaSpeedHB();");
  xs("}");
  xs("rule _arenaHB5 minInterval 3 inactive {");
    xs("initArenaLava();");
    xs("arenaRelicHB();");
  xs("}");
  xs("rule _arenaHB6 minInterval 3 inactive {");
    xs("initArenaResources();");
    xs("arenaResourcesHB();");
  xs("}");
  xs("rule _arenaHB7 minInterval 3 inactive {");
    xs("initArenaMystic();");
    xs("arenaRelicHB();");
  xs("}");
  xs("rule _test minInterval 1 active {");
     xs("xsDisableSelf();");
  xs("}");
  rmAddTriggerEffect("SetIdleProcessing");
  rmSetTriggerEffectParam("IdleProc",");*/rule _tosInjectEnd inactive { if (true) { //");
}

const float PI = 3.141592;
const string cES = "";

float gSeaLevel = 0;
int _uuid = 0;
string debug = "";
string hexEdge = "";
string hexCenter = "";

float iifF(bool cond=true, float val1=0, float val2=0) {
  if (cond==true) return(val1); return(val2);
}

string iif(bool cond=true, string t="", string f="") {
  if (cond==true) return(t); return(f);
}

string uuid(string tag="") {
  _uuid++;
  return("UID" + tag + _uuid);
}

// LIST
string listAdd(string list="", string item="", string delim="|") {
  if (xsStringLength(list)==0) return(item);
  return(list+delim+item);
}

string listGet(string list="", int at=1, string delim="|") {
  int end = xsStringLength(list) - 1;
  string item = cES;
  for (pos=0;<=end) {
    string chr = xsSubString(list, 1, pos);
    if (chr!=delim) item = item + chr;
    if (chr==delim || pos==end) {
      at--;
      if (at==0) return(item);
      item = cES;
    }
  }
  return(item);
}

int listLen(string list="", string delim="|") {
  int len = xsStringLength(list);
  int cnt = 1;
  for (pos=0;<len) if (xsSubString(list, 1, pos)==delim) cnt++;
  return(cnt);
}

string listSet(string list="", int at=1, string value="", string delim="|") {
  int end = xsStringLength(list) - 1;
  int lst = 0;
  string left = cES;
  string item = cES;
  for (pos=0;<=end) {
    string chr = xsSubString(list, 1, pos);
    if (chr!=delim) item = item + chr;
    if (chr==delim || pos==end) {
      if (lst>0) left = left + delim;
      lst++;
      at--;
      if (at==0) {
        left = left + value;
        if (end==pos) return(left);
        string right = xsSubString(list, end - pos, pos + 1);
        return(listAdd(left, right, delim));
      }
      left = left + item;
      item = cES;
    }
  }
  if (lst==0) at--;
  for (pos=0;<at) left = left + delim;
  return(left + value);
}

string listRandom(string list="", string delim="|") {
  int pos = rmRandInt(1, listLen(list, delim));
  return(listGet(list, pos, delim));
}

// INTEGER LIST
string intAdd(string list="", int value=0, string delim="#") {
  return(listAdd(list, cES + value, delim));
}

int intGet(string list="", int at=1, string delim="#") {
  return(xsStringToInt(listGet(list, at, delim)));
}

int intLen(string list="", string delim="#") {
  return(listLen(list, delim));
}

string intSet(string list="", int at=1, int value=0, string delim="#") {
  return(listSet(list, at, cES + value, delim));
}

/* MATH FUNCTIONS  ************************************/
float circleAtX(float angle=0, float radius=0, float ptX=.5) {
   float atX = (radius * xsCos(rmDegreesToRadians(angle)) + ptX); // FIND X AT CIRCLES EDGE
   atX = iifF(atX<0,0,atX);
   atX = iifF(atX>1,1,atX);
   return (atX);
}

float circleAtZ(float angle=0, float radius=0, float ptZ=.5) {
   float atZ = (radius * xsSin(rmDegreesToRadians(angle)) + ptZ); // FIND Z AT CIRCLES EDGE
   atZ = iifF(atZ<0,0,atZ);
   atZ = iifF(atZ>1,1,atZ);
   return (atZ);
}

string GetEdge(int pick=0) {
  if (pick==0) pick = rmRandInt(1,4);
  if (pick%4==1) return(listRandom("ForestFloorPalm|DirtA|SandDirt50|SandDirt50b|SavannahC|SavannahD|UnderwaterRockF"));
  if (pick%4==2) return(listRandom("GaiaCreepB|MarshA|MarshB|MarshE|RiverMarshA|RiverMarshB|RiverMarshC|JungleA|JungleB|PlainA|PlainB"));
  if (pick%4==3) return(listRandom("TundraRockA|TundraRockB|DirtB|ForestFloorPine|GrassDirt75|JungleDirt75"));
  return(listRandom("SnowA|SnowB|SnowGrass25|SnowSand25|ForestFloorPineSnow"));
}

string GetBlackType(int pick=0) {
   return(listRandom("Hades6|Dam|HadesCliff|Hades3"));
}

string GetCenter(int pick=0) {
  if (pick==0) pick = rmRandInt(1,3);
  if (pick%3==1) return(listRandom("CityTileA|NorseRoadA|CityTileAtlantis|EgyptianRoadA|GreekRoadA"));
  if (pick%3==1) return(listRandom("CoralE|CoralF|UnderwaterRockB|UnderwaterRockC|UnderwaterRockD|UnderwaterRockE"));
  return(listRandom("RiverIcyA|RiverIcyB|RiverGrassyA|RiverGrassyB"));
}

/* AREA FUNCTIONS  ************************************/

int areaCreateAt(float ptX=.5, float ptZ=.5, float area=0) {
  int id = rmCreateArea(uuid());
  rmSetAreaLocation(id, ptX, ptZ);
  rmSetAreaSize(id, area, area);
  return(id);
}

int areaCreateOnCircle(float ptX=0, float ptZ=0, float area=0, float angle=0, float radius=0) {
  float frX = circleAtX(angle, radius, ptX);
  float frZ = circleAtZ(angle, radius, ptZ);
  return(areaCreateAt(frX, frZ, area));
}

int areaCreateOnCircleInf(float ptX=0, float ptZ=0, float area=0, float angle=0, float radius=0, float tangle=0, float tradius=0) {
  float frX = circleAtX(angle, radius, ptX);
  float frZ = circleAtZ(angle, radius, ptZ);
  float toX = circleAtX(tangle, tradius, ptX);
  float toZ = circleAtZ(tangle, tradius, ptZ);
  int id = areaCreateAt(frX, frZ, area);
  rmAddAreaInfluenceSegment(id, frX, frZ, toX, toZ);
  return(id);
}

void areaWaterBlendCoherence(int id=0, string type="", int heightblend=2, float coherence=1) {
  rmSetAreaWaterType(id, type);
  rmSetAreaHeightBlend(id, heightblend);
  rmSetAreaCoherence(id, coherence);
}

void areaLandBlendCoherence(int id=0, string type="", int heightblend=2, float coherence=1) {
  rmSetAreaTerrainType(id, type);
  rmSetAreaHeightBlend(id, heightblend);
  rmSetAreaCoherence(id, coherence);
}

void areaCliff(int id=0, string type="", int height=0, int heightblend=2, float coherence=1) {
  rmSetAreaCliffType(id, type);
  rmSetAreaCliffPainting(id, true, true, true, 3, true);
  rmSetAreaCliffHeight(id, height, 0.0, 0.5);
  rmSetAreaHeightBlend(id, heightblend);
  rmSetAreaCoherence(id, coherence);
}

string ptAt(float ptX=0, float ptZ=0) {
  int mX = rmXFractionToMeters(ptX) + 0.01;
  int mZ = rmZFractionToMeters(ptZ) + 0.01;
  return(cES+mX+"#"+mZ);
}

void houseAt(int p=0, int aid=0, string type="", float ptX=0, float ptZ=0) {
  int id = rmCreateObjectDef(uuid());
  rmAddObjectDefItem(id, type, 1, 0.0);
  rmPlaceObjectDefAtLoc(id, p, ptX, ptZ, 1);
  rmAddUnitsToArmy(p, aid, id);
}

void playerAt(int p=0, float ptX=0, float ptZ=0) {
  rmPlacePlayer(p, ptX, ptZ);
  int aid = rmCreateArmy(p, "Army");
  float radius = rmXTilesToFraction(12);
  string type = "house";
  for(j=1;<=8) {
    float angle = 360/8 * j;
    float atX = circleAtX(angle, radius, ptX);
    float atZ = circleAtZ(angle, radius, ptZ);
    houseAt(p, aid, type, atX, atZ);
    if (j==7) type = "Settlement Level 1";
  }
}

int hexAt(float ptX=0, float ptZ=0, float radius=0, float rotate=0) {
  float area = radius * radius * PI;
  int id = areaCreateAt(ptX, ptZ, area);
  areaLandBlendCoherence(id, hexCenter, 0, 1);
  rmBuildArea(id);
  area = radius * radius/2;
  for(j=1;<=6) {
    float angle = (60 * j) + rotate;
    float tangle = angle + 60;
    int eid = areaCreateOnCircleInf(ptX, ptZ, area, angle, radius, tangle, radius);
    areaLandBlendCoherence(eid, hexEdge, 0, 1);
    rmBuildArea(eid);
  }
  return(id);
}

void postAt(float ptX=0, float ptZ=0, int aid=0) {
  int id = rmCreateObjectDef(uuid());
  rmAddObjectDefItem(id, "Outpost", 1, 0.0);
  rmPlaceObjectDefAtLoc(id, 0, ptX, ptZ, 1);
  rmAddUnitsToArmy(0, aid, id);
}

void pitch_spires(float ptX=0, float ptZ=0, float radius=0) {
  int pick = rmRandInt(1, 6);
  hexCenter = listGet("TundraRoadA|PlainRoadA|GreekRoadA|EgyptianRoadA|NorseRoadA|JungleRoadA", pick);
  hexEdge = listGet("ShorelineTundra|ShorelinePlain|ShorelineMediterranean|ShorelineRedSea|ShorelineNorwegian|ShorelineJungle", pick);
  int edge = rmRandInt(1, iifF(pick<=3, 4, 3));
  hexEdge = hexEdge + listGet("A|B|C|D", rmRandInt(1, iifF(pick<=3, 4, 3))); // FIRST 3 SHORELINES HAVE A "D" OPTION
  string seas = "Norwegian Sea|Yellow Sea|Aegean Sea|Red Sea|North Atlantic Ocean|South Sea";
  string oceans = "Tundra Pool|Yellow River|Greek River|Egyptian Nile|Norse River|Savannah Water Hole";
  string water = listGet(iif(rmRandInt(1,2)==1, seas, oceans), pick);
  string cliff = listGet("CliffGreekB|CliffPlainA|CliffGreekA|CliffEgyptianA|CliffNorseA|CliffJungleA", pick);
  int aid = hexAt(ptX, ptZ, radius);
  float blob = radius * radius * PI * 0.066;
  float sides = rmRandInt(2,3) * 2;
  float area = blob * 8 / sides;
  float steps = 360 / sides;
  float cradius = radius * .5;
  for(i=1;<=sides) {
    float angle = i * steps + steps/2;
    int id = areaCreateOnCircle(ptX, ptZ, area, angle, cradius);
    areaWaterBlendCoherence(id, water, 0, .5);
    rmBuildArea(id);
  }
  area = blob * 12 / sides;
  for(i=1;<=sides/2) {
    angle = i * steps;
    float tangle = angle + 180;
    id = areaCreateOnCircleInf(ptX, ptZ, area, angle, cradius, tangle, cradius);
    areaLandBlendCoherence(id, cliff, 1, 1);
    rmSetAreaBaseHeight(id, 2);
    rmBuildArea(id);
  }
  area = blob * 2 / sides;
  float height = 32 / sides;
  for(i=1;<=sides) {
    angle = i * steps;
    id = areaCreateOnCircleInf(ptX, ptZ, area, angle, radius*.55, angle, radius*.48);
    areaLandBlendCoherence(id, cliff, 1, 1);
    rmSetAreaBaseHeight(id, height);
    rmBuildArea(id);
    id = areaCreateOnCircleInf(ptX, ptZ, area*.5, angle, radius*.28, angle, radius*.14);
    areaLandBlendCoherence(id, cliff, 1, 1);
    rmSetAreaBaseHeight(id, height-2);
    rmBuildArea(id);
  }
  area = blob;
  for(i=1;<=sides/2) {
    angle = i * steps;
    tangle = angle + 180;
    cradius = radius * rmRandFloat(.5,.6);
    id = areaCreateOnCircleInf(ptX, ptZ, area, angle, cradius, tangle, cradius);
    areaLandBlendCoherence(id, hexCenter, 0, 1);
    rmBuildArea(id);
    angle = i * steps + steps/2;
    tangle = angle + 180;
    area = area * .75;
    cradius = cradius * .75;
    id = areaCreateOnCircleInf(ptX, ptZ, area, angle, cradius, tangle, cradius);
    areaLandBlendCoherence(id, hexCenter, 2, 1);
    rmSetAreaBaseHeight(id, 1);
    rmBuildArea(id);
  }
  area = blob * .1;
  id = areaCreateAt(ptX, ptZ, area);
  areaLandBlendCoherence(id, hexEdge, 1, .5);
  rmSetAreaBaseHeight(id, gSeaLevel);
  rmBuildArea(id);
}

void pitch_oasis(float ptX=0, float ptZ=0, float radius=0) {
  hexCenter = listRandom("SandA|SandB|SandC|SandD");
  hexEdge = listRandom("RiverSandyA|RiverSandyB|RiverSandyC|RiverSandyShallowA");
  string water = "Watering Hole";
  int aid = hexAt(ptX, ptZ, radius);
  for(j=1;<=6) {
    float angle = 60 * j;
    float tangle = angle + 60;
    float cradius = radius * .66;
    float tradius = cradius * rmRandFloat(0.7, 1.0);
    float area = cradius * cradius * rmRandFloat(0.9, 1.15);
    int id = areaCreateOnCircleInf(ptX, ptZ, area, angle, cradius, tangle, tradius);
    areaWaterBlendCoherence(id, water, 1, .5);
  }
  area = rmXTilesToFraction(1) * .5;
  id = areaCreateAt(ptX, ptZ, area);
  areaLandBlendCoherence(id, hexCenter, 1, .5);
  rmSetAreaBaseHeight(id, 4);
  rmBuildAllAreas();
  int oid = rmCreateObjectDef(uuid());
  rmAddObjectDefItem(oid, "Dust Devil", 2, 3.0);
  rmAddObjectDefItem(oid, "Sand Drift Patch", 1, 1.0);
  rmPlaceObjectDefAtLoc(oid, 0, ptX, ptZ, 1);
}

void pitch_cliffs(float ptX=0, float ptZ=0, float radius=0) {
  int pick = rmRandInt(1,3);
  hexCenter = listGet("CliffGreekB|CliffJungleB|CliffPlainB", pick);
  hexEdge = listRandom(listGet("GreekRoadA#GrassDirt25#GrassDirt50|JungleRoadA#JungleDirt25#JungleDirt50|PlainRoadA#PlainDirt25#PlainDirt50", pick), "#");
  string cliff = listRandom(listGet("Greek#Greek Rock|Jungle#Jungle Rock|Plain#Plain Rock", pick), "#");
  int aid = hexAt(ptX, ptZ, radius);
  float area = radius * radius * PI * .35;
  int height = 5 + rmRandInt(1,3);
  int cliffs = xsMax(4, 0+cNumberTeams);
  float pct = 1.0/(cliffs+1);
  int id = areaCreateAt(ptX, ptZ, area);
  areaCliff(id, cliff, height, 1, 0);
  rmSetAreaCliffEdge(id, cliffs, pct, 0.1, .7, 0);
  rmSetAreaCliffPainting(id, false, true, true, 1.5, true);
  rmBuildArea(id);
  area = rmXMetersToFraction(1);
  id = areaCreateAt(ptX, ptZ, area);
  areaLandBlendCoherence(id, hexCenter, 0, 1);
  rmBuildArea(id);
  int oid = rmCreateObjectDef(uuid());
  rmAddObjectDefItem(oid, "Mist Olympus", 1, 1.0);
  rmPlaceObjectDefAtLoc(oid, 0, ptX, ptZ, 1);
  oid=rmCreateObjectDef(uuid());
  rmAddObjectDefItem(oid, "rock limestone small", 1, 1.0);
  rmAddObjectDefItem(oid, "rock limestone sprite", 3, 3.0);
  rmAddObjectDefItem(oid, "grass", 2, 3.0);
  rmPlaceObjectDefInArea(oid, 0, aid, 20);
}

void pitch_mystic(float ptX=0, float ptZ=0, float radius=0) {
  string options = "CoralA|CoralB|CoralC2|MarshC|UnderwaterIceB|UnderwaterIceC";
  hexEdge = listRandom(options);
  hexCenter = listRandom("CoralC|CoralD|CoralE|CoralF");
  string pit = listRandom(options);
  string bridge = listRandom(options);
  if (hexEdge==pit) hexEdge = "OlympusC";
  if (bridge==pit) bridge = "IceC";
  int aid = hexAt(ptX, ptZ, radius);
  int dir = iifF(rmRandInt(1,3)==1, 1, -1);
  float cradius = radius * .55;
  float area = cradius * cradius * PI;
  int id = areaCreateAt(ptX, ptZ, area);
  areaLandBlendCoherence(id, pit, 3, 1);
  rmSetAreaBaseHeight(id, dir * 8);
  rmBuildArea(id);
  cradius = radius * .8;
  area = cradius * cradius * .5;
  int step = 360/3;
  for(j=1;<=3) {
    float angle = step * j;
    float tangle = angle + step;
    id = areaCreateOnCircleInf(ptX, ptZ, area, angle, cradius, tangle, cradius);
    areaLandBlendCoherence(id, bridge, 2, 1);
    rmSetAreaBaseHeight(id, dir * 2);
  }
  rmBuildAllAreas();
  int oid = rmCreateObjectDef(uuid());
  rmAddObjectDefItem(oid, "Vortex landing", 1, 0);
  rmPlaceObjectDefAtLoc(oid, 0, ptX, ptZ, 1);
}

void pitch_forest(float ptX=0, float ptZ=0, float radius=0) {
  int pick = rmRandInt(1,4);
  hexEdge = listGet("MarshC|SavannahB|RiverGrassyC|GrassA", pick);
  hexCenter = listGet("DirtC|SavannahA|SnowGrass75|GrassB", pick);
  string tree = listGet("Marsh Tree|Savannah Tree|Tundra Tree|Oak Tree", pick);
  string hill = listGet("MarshF|PlainDirt75|RiverIcyC|ShorelineJungleC", pick);
  string floor = listGet("ForestFloorMarsh|ForestFloorSavannah|ForestFloorTundra|ForestFloorOak", pick);
  int aid = hexAt(ptX, ptZ, radius);
  float cradius = radius * .4;
  float area = cradius * cradius * PI;
  int id = areaCreateAt(ptX, ptZ, area);
  areaLandBlendCoherence(id, hill, 1, .25);
  rmSetAreaBaseHeight(id, pick);
  rmSetAreaMinBlobs(id, 1);
  rmSetAreaMaxBlobs(id, 8);
  rmSetAreaMinBlobDistance(id, 0.0);
  rmSetAreaMaxBlobDistance(id, rmXFractionToMeters(cradius));
  rmBuildArea(id);
  int tid = rmCreateObjectDef(uuid());
  rmAddObjectDefItem(tid, tree, 1, 0);
  float trees = cNumberPlayers * rmRandInt(10, 17);
  cradius = radius * .8;
  float steps = cradius / trees;
  area = rmXMetersToFraction(1) * .02;
  for(j=20;<=trees) {
    float angle = 13 * j;
    float tangle = angle + steps/2;
    float dist = steps * j;
    id = areaCreateOnCircleInf(ptX, ptZ, area, angle, dist, tangle, dist);
    areaLandBlendCoherence(id, floor, 1, .25);
    rmBuildArea(id);
    float frX = circleAtX(angle, dist, ptX);
    float frZ = circleAtZ(angle, dist, ptZ);
    rmPlaceObjectDefAtLoc(tid, 0, frX, frZ, 1);
  }
}

void pitch_lava(float ptX=0, float ptZ=0, float radius=0) {
  hexEdge = listRandom("Hades1|Hades2|Hades8|Hades9|UnderwaterRockA|UnderwaterRockD|ForestFloorDeadPine");
  string land = listRandom("UnderwaterRockA|UnderwaterRockD|HadesBuildable1|HadesBuildable2");
  string lava = listRandom("Hades3|Hades4|Hades5|Hades7");
  hexCenter = lava;
  int aid = hexAt(ptX, ptZ, radius);
  float area = radius * radius * PI * .55;
  int id = areaCreateAt(ptX, ptZ, area);
  areaLandBlendCoherence(id, land, 2, .25);
  rmSetAreaBaseHeight(id, 9);
  rmBuildArea(id);
  area = rmXMetersToFraction(1) * .2;
  float drips = rmRandInt(4,7);
  float step = 360/drips;
  for(j=1;<=drips) {
    float mod = rmRandFloat(.3, .4);
    float angle = step * j;
    float cradius = radius * mod;
    float tangle = angle + step * mod * iifF(rmRandInt(1,2)==1, 1, -1);
    float tradius = radius * .9;
    id = areaCreateOnCircleInf(ptX, ptZ, area, angle, cradius, tangle, tradius);
    areaLandBlendCoherence(id, lava, 0, 0);
    rmBuildArea(id);
  }
  area = radius * radius * PI * .05;
  id = areaCreateAt(ptX, ptZ, area);
  areaLandBlendCoherence(id, land, 0, 1);
  rmBuildArea(id);
  id = rmCreateObjectDef(uuid());
  rmAddObjectDefItem(id, "Hades Fire", 1, 0);
  step = 360/6;
  for(j=1;<=6) {
    angle = step * j;
    float frX = circleAtX(angle, radius, ptX);
    float frZ = circleAtZ(angle, radius, ptZ);
    rmPlaceObjectDefAtLoc(id, 0, frX, frZ, 1);
  }
}

void pitch_flats(float ptX=0, float ptZ=0, float radius=0) {
  hexEdge = listRandom("Hades8|plainRoadA|EgyptianRoadA");
  hexCenter = listRandom("GaiaCreepA|GaiaCreepBorder|GrassA|GrassB|MarshD|MarshF");
  int aid = hexAt(ptX, ptZ, radius);
  int oid = rmCreateObjectDef(uuid());
  rmAddObjectDefItem(oid, "Skeleton Giant", 1, 1);
  rmPlaceObjectDefInArea(oid, 0, aid, 50);
  oid = rmCreateObjectDef(uuid());
  rmAddObjectDefItem(oid, "Stalagmite", 1, 0);
  float cradius = radius * .9;
  float step = 360/12;
  float area = rmXMetersToFraction(1) * .04;
  for(j=1;<=12) {
    float angle = step * j;
    float frX = circleAtX(angle, cradius, ptX);
    float frZ = circleAtZ(angle, cradius, ptZ);
    int id = areaCreateAt(frX, frZ, area);
    areaLandBlendCoherence(id, "OlympusC", 0, 1);
    rmBuildArea(id);
    rmPlaceObjectDefAtLoc(oid, 0, frX, frZ, 1);
  }
}

void main(void) {
  int growth = cNumberNonGaiaPlayers - 2 + cNumberNonGaiaPlayers%2;
  int sizeX = 383 + growth * 10;
  if (cNumberNonGaiaPlayers>4) sizeX = sizeX + 60;
  if (cNumberNonGaiaPlayers>6) sizeX = sizeX + 15;
  if (cNumberNonGaiaPlayers>10) sizeX = sizeX + 60;
  sizeX = sizeX + sizeX%2;
  rmSetMapSize(sizeX, sizeX);
  rmSetSeaLevel(0);
  rmTerrainInitialize(GetBlackType(), 0);
  float radiusPitch = rmXTilesToFraction(20 + growth);
  float radiusHome = rmXTilesToFraction(16);
  float spacer = rmXTilesToFraction(5);
  int paid = rmCreateArmy(0, "Centers");
  float radius = (radiusPitch+spacer) * 2;
  pitch_flats(.5, .5, radiusPitch);
  postAt(.5, .5, paid);
  for(i=1;<=6) {
    float angle = (60 * i) + 60/2;
    float ptX = circleAtX(angle, radius, .5);
    float ptZ = circleAtZ(angle, radius, .5);
    if (i==1) pitch_spires(ptX, ptZ, radiusPitch);
    else if (i==2) pitch_cliffs(ptX, ptZ, radiusPitch);
    else if (i==3) pitch_oasis(ptX, ptZ, radiusPitch);
    else if (i==4) pitch_lava(ptX, ptZ, radiusPitch);
    else if (i==5) pitch_forest(ptX, ptZ, radiusPitch);
    else if (i==6) pitch_mystic(ptX, ptZ, radiusPitch);
    postAt(ptX, ptZ, paid);
  }
  // PLAYERS
  radius = 90 + growth * 2.5;
  radius = rmXTilesToFraction(radius);
  int tick = 1;
  float offset = 60;
  for(i=1;<=2) {
    for (j=1;<=3) {
      if (tick>cNumberNonGaiaPlayers) continue;
      hexEdge = GetEdge(tick);
      hexCenter = GetCenter(tick);
      angle = (60 * tick) + offset;
      for (k=1;<=2) {
        ptX = circleAtX(angle, radius, .5);
        ptZ = circleAtZ(angle, radius, .5);
        int id = hexAt(ptX, ptZ, radiusHome, offset * 2);
        if (tick<=cNumberNonGaiaPlayers) {
          rmSetPlayerArea(tick, id);
          playerAt(tick, ptX, ptZ);
          postAt(ptX, ptZ, paid);
        }
        tick = tick + 1;
        angle = angle + 180;
      }
    }
    offset = 150;
    radius = radiusPitch*3 + spacer*6 + radiusHome;
  }
  int oid = rmCreateObjectDef(uuid());
  rmAddObjectDefItem(oid, "Slinger", 3, 2);
  rmAddObjectDefItem(oid, "Skraeling", 2, 2);
  rmAddObjectDefItem(oid, "Raiding Cavalry", 1, 2);
  rmPlaceObjectDefPerPlayer(oid, true);

  InjectXS();
}
